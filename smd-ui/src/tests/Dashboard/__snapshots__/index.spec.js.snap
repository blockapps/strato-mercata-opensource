// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dashboard: index componentWillUnmount 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dashboard
    appMetadata={
      Object {
        "error": undefined,
        "health": undefined,
        "loading": false,
        "metadata": undefined,
        "nodeInfo": undefined,
      }
    }
    dashboard={
      Object {
        "blockDifficulty": Array [
          Object {
            "x": 0,
            "y": 8192,
          },
          Object {
            "x": 1,
            "y": 131072,
          },
          Object {
            "x": 2,
            "y": 131072,
          },
          Object {
            "x": 3,
            "y": 131072,
          },
          Object {
            "x": 4,
            "y": 131072,
          },
          Object {
            "x": 5,
            "y": 131072,
          },
          Object {
            "x": 6,
            "y": 131072,
          },
          Object {
            "x": 7,
            "y": 131072,
          },
          Object {
            "x": 8,
            "y": 131072,
          },
          Object {
            "x": 9,
            "y": 131072,
          },
        ],
        "blockPropagation": Array [
          Object {
            "x": 0,
            "y": 0,
          },
          Object {
            "x": 1,
            "y": 1512994588,
          },
          Object {
            "x": 2,
            "y": 3358,
          },
          Object {
            "x": 3,
            "y": 19,
          },
          Object {
            "x": 4,
            "y": 1846,
          },
          Object {
            "x": 5,
            "y": 301,
          },
          Object {
            "x": 6,
            "y": 48,
          },
          Object {
            "x": 7,
            "y": 55429,
          },
          Object {
            "x": 8,
            "y": 106195,
          },
          Object {
            "x": 9,
            "y": 58,
          },
        ],
        "contractsCount": 2,
        "lastBlockNumber": 9,
        "transactionTypes": Array [
          Object {
            "type": "FunctionCall",
            "val": 6,
          },
          Object {
            "type": "Transfer",
            "val": 1,
          },
          Object {
            "type": "Contract",
            "val": 2,
          },
        ],
        "transactionsCount": Array [
          Object {
            "x": 0,
            "y": 0,
          },
          Object {
            "x": 1,
            "y": 1,
          },
          Object {
            "x": 2,
            "y": 1,
          },
          Object {
            "x": 3,
            "y": 1,
          },
          Object {
            "x": 4,
            "y": 1,
          },
          Object {
            "x": 5,
            "y": 1,
          },
          Object {
            "x": 6,
            "y": 1,
          },
          Object {
            "x": 7,
            "y": 1,
          },
          Object {
            "x": 8,
            "y": 1,
          },
          Object {
            "x": 9,
            "y": 1,
          },
        ],
        "usersCount": 1,
      }
    }
    node={
      Object {
        "coinbase": Object {
          "coinbase": "82069cc441c42b2706fa5d3129deeb677812e5a5",
        },
        "name": "LOCALHOST",
        "peers": Object {},
      }
    }
    subscribeRoom={[Function]}
    unSubscribeRoom={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Connect(Tour))
          finalStepSelector="#accounts"
          name="dashboard"
          nextPage="accounts"
          steps={
            Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-welcome",
                "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                "title": "Welcome to STRATO!",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#accounts",
                "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                "title": "Adding Users",
                "type": "hover",
              },
            ]
          }
        />,
        <div
          className="row d-flex align-items-center"
        >
          <div
            className="col-sm-6 text-left"
          >
            <h3>
              Node Stats
            </h3>
          </div>
          <div
            className="sys-info-container row col-sm-6 text-right"
            style={
              Object {
                "marginBottom": "10px",
                "marginLeft": "0px",
                "marginRight": "0px",
                "marginTop": "25px",
              }
            }
          >
            <p
              className="text-right"
            >
              System Metrics Loading...
            </p>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <br />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-4"
          >
            <Blueprint.Popover
              arrowSize={30}
              className="full-width"
              content={
                <div
                  className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                >
                  <h5
                    className="pt-callout-title"
                  >
                    API Disconnected
                  </h5>
                  Cannot connect to the Node's API
                </div>
              }
              defaultIsOpen={false}
              hoverCloseDelay={300}
              hoverOpenDelay={150}
              inheritDarkTheme={true}
              inline={false}
              interactionKind={2}
              isDisabled={false}
              isModal={false}
              openOnTargetFocus={true}
              popoverClassName=""
              position={7}
              rootElementTag="span"
              transitionDuration={300}
              useSmartArrowPositioning={true}
              useSmartPositioning={false}
            >
              <withRouter(Connect(NumberCard))
                description={<div />}
                iconClass="fa-triangle-exclamation"
                mode="danger"
                number="DISCONNECTED"
              />
            </Blueprint.Popover>
          </div>
          <div
            className="col-sm-4"
          >
            <Link
              replace={false}
              to="/accounts"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Users"
                iconClass="fa-users"
                number={1}
              />
            </Link>
          </div>
          <div
            className="col-sm-4"
          >
            <Link
              replace={false}
              to="/contracts"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Contracts"
                iconClass="fa-file-contract"
                number={2}
              />
            </Link>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <br />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-4"
          >
            <withRouter(Connect(NumberCard))
              className="smd-pointer"
              description="Node ID"
              iconClass="fa-exclamation-circle"
              mode="pt-intent-warning"
              number="No Identity"
              textSize="h4"
            />
          </div>
          <div
            className="col-sm-8"
          >
            <withRouter(Connect(NodeCard)) />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <hr />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-9 text-left"
          >
            <h3>
              Network Stats
            </h3>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-3"
          >
            <div
              id="networkInfo"
            >
              <Link
                replace={false}
                to=""
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Network"
                  iconClass="fa-exclamation-circle"
                  mode="danger"
                  number="UNKNOWN"
                />
              </Link>
              <br />
              <Link
                replace={false}
                to="/blocks"
              >
                <withRouter(Connect(NumberCard))
                  description="Blocks"
                  iconClass="fa-cube"
                  number={9}
                />
              </Link>
            </div>
          </div>
          <div
            className="col-sm-3"
          >
            <withRouter(Connect(ValidatorsCard)) />
          </div>
          <div
            className="col-sm-6"
          >
            <withRouter(Connect(TransactionList)) />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <hr />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-9 text-left"
          >
            <h3>
              Historical Stats
            </h3>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-3"
          >
            <BarGraph
              data={
                Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1,
                  },
                  Object {
                    "x": 2,
                    "y": 1,
                  },
                  Object {
                    "x": 3,
                    "y": 1,
                  },
                  Object {
                    "x": 4,
                    "y": 1,
                  },
                  Object {
                    "x": 5,
                    "y": 1,
                  },
                  Object {
                    "x": 6,
                    "y": 1,
                  },
                  Object {
                    "x": 7,
                    "y": 1,
                  },
                  Object {
                    "x": 8,
                    "y": 1,
                  },
                  Object {
                    "x": 9,
                    "y": 1,
                  },
                ]
              }
              identifier="TxCount"
              label="Transactions per Last 15 Blocks"
              number={
                Object {
                  "x": 0,
                  "y": 0,
                }
              }
            />
          </div>
          <div
            className="col-sm-3"
          >
            <PieChart
              data={
                Array [
                  Object {
                    "type": "FunctionCall",
                    "val": 6,
                  },
                  Object {
                    "type": "Transfer",
                    "val": 1,
                  },
                  Object {
                    "type": "Contract",
                    "val": 2,
                  },
                ]
              }
            />
          </div>
          <div
            className="col-sm-3"
          >
            <BarGraph
              data={
                Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1512994588,
                  },
                  Object {
                    "x": 2,
                    "y": 3358,
                  },
                  Object {
                    "x": 3,
                    "y": 19,
                  },
                  Object {
                    "x": 4,
                    "y": 1846,
                  },
                  Object {
                    "x": 5,
                    "y": 301,
                  },
                  Object {
                    "x": 6,
                    "y": 48,
                  },
                  Object {
                    "x": 7,
                    "y": 55429,
                  },
                  Object {
                    "x": 8,
                    "y": 106195,
                  },
                  Object {
                    "x": 9,
                    "y": 58,
                  },
                ]
              }
              identifier="BlockProp"
              label="Block Interval Last 15 Blocks"
              units="s"
            />
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
      "id": "tour-welcome",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "finalStepSelector": "#accounts",
          "name": "dashboard",
          "nextPage": "accounts",
          "steps": Array [
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-welcome",
              "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
              "title": "Welcome to STRATO!",
              "type": "hover",
            },
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#accounts",
              "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
              "title": "Adding Users",
              "type": "hover",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6 text-left"
            >
              <h3>
                Node Stats
              </h3>
            </div>,
            <div
              className="sys-info-container row col-sm-6 text-right"
              style={
                Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                }
              }
            >
              <p
                className="text-right"
              >
                System Metrics Loading...
              </p>
            </div>,
          ],
          "className": "row d-flex align-items-center",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Node Stats
              </h3>,
              "className": "col-sm-6 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Node Stats",
              },
              "ref": null,
              "rendered": "Node Stats",
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <p
                className="text-right"
              >
                System Metrics Loading...
              </p>,
              "className": "sys-info-container row col-sm-6 text-right",
              "style": Object {
                "marginBottom": "10px",
                "marginLeft": "0px",
                "marginRight": "0px",
                "marginTop": "25px",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "System Metrics Loading...",
                "className": "text-right",
              },
              "ref": null,
              "rendered": "System Metrics Loading...",
              "type": "p",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <br />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <br />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-4"
            >
              <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>
            </div>,
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />
              </Link>
            </div>,
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />
              </Link>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "arrowSize": 30,
                "children": <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />,
                "className": "full-width",
                "content": <div
                  className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                >
                  <h5
                    className="pt-callout-title"
                  >
                    API Disconnected
                  </h5>
                  Cannot connect to the Node's API
                </div>,
                "defaultIsOpen": false,
                "hoverCloseDelay": 300,
                "hoverOpenDelay": 150,
                "inheritDarkTheme": true,
                "inline": false,
                "interactionKind": 2,
                "isDisabled": false,
                "isModal": false,
                "openOnTargetFocus": true,
                "popoverClassName": "",
                "position": 7,
                "rootElementTag": "span",
                "transitionDuration": 300,
                "useSmartArrowPositioning": true,
                "useSmartPositioning": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "description": <div />,
                  "iconClass": "fa-triangle-exclamation",
                  "mode": "danger",
                  "number": "DISCONNECTED",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />
              </Link>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />,
                "replace": false,
                "to": "/accounts",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Users",
                  "iconClass": "fa-users",
                  "number": 1,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />
              </Link>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />,
                "replace": false,
                "to": "/contracts",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Contracts",
                  "iconClass": "fa-file-contract",
                  "number": 2,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <br />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <br />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-4"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />
            </div>,
            <div
              className="col-sm-8"
            >
              <withRouter(Connect(NodeCard)) />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "smd-pointer",
                "description": "Node ID",
                "iconClass": "fa-exclamation-circle",
                "mode": "pt-intent-warning",
                "number": "No Identity",
                "textSize": "h4",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(NodeCard)) />,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <hr />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <hr />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-9 text-left"
          >
            <h3>
              Network Stats
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Network Stats
            </h3>,
            "className": "col-sm-9 text-left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Network Stats",
            },
            "ref": null,
            "rendered": "Network Stats",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-3"
            >
              <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={9}
                  />
                </Link>
              </div>
            </div>,
            <div
              className="col-sm-3"
            >
              <withRouter(Connect(ValidatorsCard)) />
            </div>,
            <div
              className="col-sm-6"
            >
              <withRouter(Connect(TransactionList)) />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={9}
                  />
                </Link>
              </div>,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>,
                  <br />,
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />
                  </Link>,
                ],
                "id": "networkInfo",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />,
                    "replace": false,
                    "to": "",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "smd-pointer",
                      "description": "Network",
                      "iconClass": "fa-exclamation-circle",
                      "mode": "danger",
                      "number": "UNKNOWN",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />,
                    "replace": false,
                    "to": "/blocks",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "description": "Blocks",
                      "iconClass": "fa-cube",
                      "number": 9,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(ValidatorsCard)) />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(TransactionList)) />,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <hr />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <hr />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-9 text-left"
          >
            <h3>
              Historical Stats
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Historical Stats
            </h3>,
            "className": "col-sm-9 text-left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Historical Stats",
            },
            "ref": null,
            "rendered": "Historical Stats",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ]
                }
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
              />
            </div>,
            <div
              className="col-sm-3"
            >
              <PieChart
                data={
                  Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ]
                }
              />
            </div>,
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ]
                }
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ]
                }
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1,
                  },
                  Object {
                    "x": 2,
                    "y": 1,
                  },
                  Object {
                    "x": 3,
                    "y": 1,
                  },
                  Object {
                    "x": 4,
                    "y": 1,
                  },
                  Object {
                    "x": 5,
                    "y": 1,
                  },
                  Object {
                    "x": 6,
                    "y": 1,
                  },
                  Object {
                    "x": 7,
                    "y": 1,
                  },
                  Object {
                    "x": 8,
                    "y": 1,
                  },
                  Object {
                    "x": 9,
                    "y": 1,
                  },
                ],
                "identifier": "TxCount",
                "label": "Transactions per Last 15 Blocks",
                "number": Object {
                  "x": 0,
                  "y": 0,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <PieChart
                data={
                  Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ]
                }
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [
                  Object {
                    "type": "FunctionCall",
                    "val": 6,
                  },
                  Object {
                    "type": "Transfer",
                    "val": 1,
                  },
                  Object {
                    "type": "Contract",
                    "val": 2,
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ]
                }
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1512994588,
                  },
                  Object {
                    "x": 2,
                    "y": 3358,
                  },
                  Object {
                    "x": 3,
                    "y": 19,
                  },
                  Object {
                    "x": 4,
                    "y": 1846,
                  },
                  Object {
                    "x": 5,
                    "y": 301,
                  },
                  Object {
                    "x": 6,
                    "y": 48,
                  },
                  Object {
                    "x": 7,
                    "y": 55429,
                  },
                  Object {
                    "x": 8,
                    "y": 106195,
                  },
                  Object {
                    "x": 9,
                    "y": 58,
                  },
                ],
                "identifier": "BlockProp",
                "label": "Block Interval Last 15 Blocks",
                "units": "s",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Connect(Tour))
            finalStepSelector="#accounts"
            name="dashboard"
            nextPage="accounts"
            steps={
              Array [
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-welcome",
                  "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                  "title": "Welcome to STRATO!",
                  "type": "hover",
                },
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#accounts",
                  "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                  "title": "Adding Users",
                  "type": "hover",
                },
              ]
            }
          />,
          <div
            className="row d-flex align-items-center"
          >
            <div
              className="col-sm-6 text-left"
            >
              <h3>
                Node Stats
              </h3>
            </div>
            <div
              className="sys-info-container row col-sm-6 text-right"
              style={
                Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                }
              }
            >
              <p
                className="text-right"
              >
                System Metrics Loading...
              </p>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <br />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-4"
            >
              <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>
            </div>
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />
              </Link>
            </div>
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />
              </Link>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <br />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-4"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />
            </div>
            <div
              className="col-sm-8"
            >
              <withRouter(Connect(NodeCard)) />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <hr />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-9 text-left"
            >
              <h3>
                Network Stats
              </h3>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-3"
            >
              <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={9}
                  />
                </Link>
              </div>
            </div>
            <div
              className="col-sm-3"
            >
              <withRouter(Connect(ValidatorsCard)) />
            </div>
            <div
              className="col-sm-6"
            >
              <withRouter(Connect(TransactionList)) />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <hr />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-9 text-left"
            >
              <h3>
                Historical Stats
              </h3>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ]
                }
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
              />
            </div>
            <div
              className="col-sm-3"
            >
              <PieChart
                data={
                  Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ]
                }
              />
            </div>
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ]
                }
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
        "id": "tour-welcome",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "finalStepSelector": "#accounts",
            "name": "dashboard",
            "nextPage": "accounts",
            "steps": Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-welcome",
                "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                "title": "Welcome to STRATO!",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#accounts",
                "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                "title": "Adding Users",
                "type": "hover",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6 text-left"
              >
                <h3>
                  Node Stats
                </h3>
              </div>,
              <div
                className="sys-info-container row col-sm-6 text-right"
                style={
                  Object {
                    "marginBottom": "10px",
                    "marginLeft": "0px",
                    "marginRight": "0px",
                    "marginTop": "25px",
                  }
                }
              >
                <p
                  className="text-right"
                >
                  System Metrics Loading...
                </p>
              </div>,
            ],
            "className": "row d-flex align-items-center",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Node Stats
                </h3>,
                "className": "col-sm-6 text-left",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Node Stats",
                },
                "ref": null,
                "rendered": "Node Stats",
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <p
                  className="text-right"
                >
                  System Metrics Loading...
                </p>,
                "className": "sys-info-container row col-sm-6 text-right",
                "style": Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "System Metrics Loading...",
                  "className": "text-right",
                },
                "ref": null,
                "rendered": "System Metrics Loading...",
                "type": "p",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <br />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <br />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-4"
              >
                <Blueprint.Popover
                  arrowSize={30}
                  className="full-width"
                  content={
                    <div
                      className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                    >
                      <h5
                        className="pt-callout-title"
                      >
                        API Disconnected
                      </h5>
                      Cannot connect to the Node's API
                    </div>
                  }
                  defaultIsOpen={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  inline={false}
                  interactionKind={2}
                  isDisabled={false}
                  isModal={false}
                  openOnTargetFocus={true}
                  popoverClassName=""
                  position={7}
                  rootElementTag="span"
                  transitionDuration={300}
                  useSmartArrowPositioning={true}
                  useSmartPositioning={false}
                >
                  <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />
                </Blueprint.Popover>
              </div>,
              <div
                className="col-sm-4"
              >
                <Link
                  replace={false}
                  to="/accounts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={1}
                  />
                </Link>
              </div>,
              <div
                className="col-sm-4"
              >
                <Link
                  replace={false}
                  to="/contracts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={2}
                  />
                </Link>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Popover
                  arrowSize={30}
                  className="full-width"
                  content={
                    <div
                      className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                    >
                      <h5
                        className="pt-callout-title"
                      >
                        API Disconnected
                      </h5>
                      Cannot connect to the Node's API
                    </div>
                  }
                  defaultIsOpen={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  inline={false}
                  interactionKind={2}
                  isDisabled={false}
                  isModal={false}
                  openOnTargetFocus={true}
                  popoverClassName=""
                  position={7}
                  rootElementTag="span"
                  transitionDuration={300}
                  useSmartArrowPositioning={true}
                  useSmartPositioning={false}
                >
                  <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />
                </Blueprint.Popover>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "arrowSize": 30,
                  "children": <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />,
                  "className": "full-width",
                  "content": <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>,
                  "defaultIsOpen": false,
                  "hoverCloseDelay": 300,
                  "hoverOpenDelay": 150,
                  "inheritDarkTheme": true,
                  "inline": false,
                  "interactionKind": 2,
                  "isDisabled": false,
                  "isModal": false,
                  "openOnTargetFocus": true,
                  "popoverClassName": "",
                  "position": 7,
                  "rootElementTag": "span",
                  "transitionDuration": 300,
                  "useSmartArrowPositioning": true,
                  "useSmartPositioning": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "description": <div />,
                    "iconClass": "fa-triangle-exclamation",
                    "mode": "danger",
                    "number": "DISCONNECTED",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/accounts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={1}
                  />
                </Link>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={1}
                  />,
                  "replace": false,
                  "to": "/accounts",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "smd-pointer",
                    "description": "Users",
                    "iconClass": "fa-users",
                    "number": 1,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/contracts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={2}
                  />
                </Link>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={2}
                  />,
                  "replace": false,
                  "to": "/contracts",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "smd-pointer",
                    "description": "Contracts",
                    "iconClass": "fa-file-contract",
                    "number": 2,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <br />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <br />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-4"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Node ID"
                  iconClass="fa-exclamation-circle"
                  mode="pt-intent-warning"
                  number="No Identity"
                  textSize="h4"
                />
              </div>,
              <div
                className="col-sm-8"
              >
                <withRouter(Connect(NodeCard)) />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Node ID"
                  iconClass="fa-exclamation-circle"
                  mode="pt-intent-warning"
                  number="No Identity"
                  textSize="h4"
                />,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Node ID",
                  "iconClass": "fa-exclamation-circle",
                  "mode": "pt-intent-warning",
                  "number": "No Identity",
                  "textSize": "h4",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(NodeCard)) />,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <hr />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <hr />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-9 text-left"
            >
              <h3>
                Network Stats
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Network Stats
              </h3>,
              "className": "col-sm-9 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Network Stats",
              },
              "ref": null,
              "rendered": "Network Stats",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-3"
              >
                <div
                  id="networkInfo"
                >
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>
                  <br />
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />
                  </Link>
                </div>
              </div>,
              <div
                className="col-sm-3"
              >
                <withRouter(Connect(ValidatorsCard)) />
              </div>,
              <div
                className="col-sm-6"
              >
                <withRouter(Connect(TransactionList)) />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  id="networkInfo"
                >
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>
                  <br />
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />
                  </Link>
                </div>,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Link
                      replace={false}
                      to=""
                    >
                      <withRouter(Connect(NumberCard))
                        className="smd-pointer"
                        description="Network"
                        iconClass="fa-exclamation-circle"
                        mode="danger"
                        number="UNKNOWN"
                      />
                    </Link>,
                    <br />,
                    <Link
                      replace={false}
                      to="/blocks"
                    >
                      <withRouter(Connect(NumberCard))
                        description="Blocks"
                        iconClass="fa-cube"
                        number={9}
                      />
                    </Link>,
                  ],
                  "id": "networkInfo",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <withRouter(Connect(NumberCard))
                        className="smd-pointer"
                        description="Network"
                        iconClass="fa-exclamation-circle"
                        mode="danger"
                        number="UNKNOWN"
                      />,
                      "replace": false,
                      "to": "",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "smd-pointer",
                        "description": "Network",
                        "iconClass": "fa-exclamation-circle",
                        "mode": "danger",
                        "number": "UNKNOWN",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <withRouter(Connect(NumberCard))
                        description="Blocks"
                        iconClass="fa-cube"
                        number={9}
                      />,
                      "replace": false,
                      "to": "/blocks",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "description": "Blocks",
                        "iconClass": "fa-cube",
                        "number": 9,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(ValidatorsCard)) />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(TransactionList)) />,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <hr />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <hr />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-9 text-left"
            >
              <h3>
                Historical Stats
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Historical Stats
              </h3>,
              "className": "col-sm-9 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Historical Stats",
              },
              "ref": null,
              "rendered": "Historical Stats",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-3"
              >
                <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1,
                      },
                      Object {
                        "x": 2,
                        "y": 1,
                      },
                      Object {
                        "x": 3,
                        "y": 1,
                      },
                      Object {
                        "x": 4,
                        "y": 1,
                      },
                      Object {
                        "x": 5,
                        "y": 1,
                      },
                      Object {
                        "x": 6,
                        "y": 1,
                      },
                      Object {
                        "x": 7,
                        "y": 1,
                      },
                      Object {
                        "x": 8,
                        "y": 1,
                      },
                      Object {
                        "x": 9,
                        "y": 1,
                      },
                    ]
                  }
                  identifier="TxCount"
                  label="Transactions per Last 15 Blocks"
                  number={
                    Object {
                      "x": 0,
                      "y": 0,
                    }
                  }
                />
              </div>,
              <div
                className="col-sm-3"
              >
                <PieChart
                  data={
                    Array [
                      Object {
                        "type": "FunctionCall",
                        "val": 6,
                      },
                      Object {
                        "type": "Transfer",
                        "val": 1,
                      },
                      Object {
                        "type": "Contract",
                        "val": 2,
                      },
                    ]
                  }
                />
              </div>,
              <div
                className="col-sm-3"
              >
                <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1512994588,
                      },
                      Object {
                        "x": 2,
                        "y": 3358,
                      },
                      Object {
                        "x": 3,
                        "y": 19,
                      },
                      Object {
                        "x": 4,
                        "y": 1846,
                      },
                      Object {
                        "x": 5,
                        "y": 301,
                      },
                      Object {
                        "x": 6,
                        "y": 48,
                      },
                      Object {
                        "x": 7,
                        "y": 55429,
                      },
                      Object {
                        "x": 8,
                        "y": 106195,
                      },
                      Object {
                        "x": 9,
                        "y": 58,
                      },
                    ]
                  }
                  identifier="BlockProp"
                  label="Block Interval Last 15 Blocks"
                  units="s"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1,
                      },
                      Object {
                        "x": 2,
                        "y": 1,
                      },
                      Object {
                        "x": 3,
                        "y": 1,
                      },
                      Object {
                        "x": 4,
                        "y": 1,
                      },
                      Object {
                        "x": 5,
                        "y": 1,
                      },
                      Object {
                        "x": 6,
                        "y": 1,
                      },
                      Object {
                        "x": 7,
                        "y": 1,
                      },
                      Object {
                        "x": 8,
                        "y": 1,
                      },
                      Object {
                        "x": 9,
                        "y": 1,
                      },
                    ]
                  }
                  identifier="TxCount"
                  label="Transactions per Last 15 Blocks"
                  number={
                    Object {
                      "x": 0,
                      "y": 0,
                    }
                  }
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ],
                  "identifier": "TxCount",
                  "label": "Transactions per Last 15 Blocks",
                  "number": Object {
                    "x": 0,
                    "y": 0,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <PieChart
                  data={
                    Array [
                      Object {
                        "type": "FunctionCall",
                        "val": 6,
                      },
                      Object {
                        "type": "Transfer",
                        "val": 1,
                      },
                      Object {
                        "type": "Contract",
                        "val": 2,
                      },
                    ]
                  }
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1512994588,
                      },
                      Object {
                        "x": 2,
                        "y": 3358,
                      },
                      Object {
                        "x": 3,
                        "y": 19,
                      },
                      Object {
                        "x": 4,
                        "y": 1846,
                      },
                      Object {
                        "x": 5,
                        "y": 301,
                      },
                      Object {
                        "x": 6,
                        "y": 48,
                      },
                      Object {
                        "x": 7,
                        "y": 55429,
                      },
                      Object {
                        "x": 8,
                        "y": 106195,
                      },
                      Object {
                        "x": 9,
                        "y": 58,
                      },
                    ]
                  }
                  identifier="BlockProp"
                  label="Block Interval Last 15 Blocks"
                  units="s"
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ],
                  "identifier": "BlockProp",
                  "label": "Block Interval Last 15 Blocks",
                  "units": "s",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Dashboard: index mapStateToProps 1`] = `
Object {
  "appMetadata": Object {
    "error": undefined,
    "health": undefined,
    "loading": false,
    "metadata": undefined,
    "nodeInfo": undefined,
  },
  "dashboard": Object {
    "blockDifficulty": Array [
      Object {
        "x": 0,
        "y": 8192,
      },
      Object {
        "x": 1,
        "y": 131072,
      },
      Object {
        "x": 2,
        "y": 131072,
      },
      Object {
        "x": 3,
        "y": 131072,
      },
      Object {
        "x": 4,
        "y": 131072,
      },
      Object {
        "x": 5,
        "y": 131072,
      },
      Object {
        "x": 6,
        "y": 131072,
      },
      Object {
        "x": 7,
        "y": 131072,
      },
      Object {
        "x": 8,
        "y": 131072,
      },
      Object {
        "x": 9,
        "y": 131072,
      },
    ],
    "blockPropagation": Array [
      Object {
        "x": 0,
        "y": 0,
      },
      Object {
        "x": 1,
        "y": 1512994588,
      },
      Object {
        "x": 2,
        "y": 3358,
      },
      Object {
        "x": 3,
        "y": 19,
      },
      Object {
        "x": 4,
        "y": 1846,
      },
      Object {
        "x": 5,
        "y": 301,
      },
      Object {
        "x": 6,
        "y": 48,
      },
      Object {
        "x": 7,
        "y": 55429,
      },
      Object {
        "x": 8,
        "y": 106195,
      },
      Object {
        "x": 9,
        "y": 58,
      },
    ],
    "contractsCount": 2,
    "lastBlockNumber": 9,
    "transactionTypes": Array [
      Object {
        "type": "FunctionCall",
        "val": 6,
      },
      Object {
        "type": "Transfer",
        "val": 1,
      },
      Object {
        "type": "Contract",
        "val": 2,
      },
    ],
    "transactionsCount": Array [
      Object {
        "x": 0,
        "y": 0,
      },
      Object {
        "x": 1,
        "y": 1,
      },
      Object {
        "x": 2,
        "y": 1,
      },
      Object {
        "x": 3,
        "y": 1,
      },
      Object {
        "x": 4,
        "y": 1,
      },
      Object {
        "x": 5,
        "y": 1,
      },
      Object {
        "x": 6,
        "y": 1,
      },
      Object {
        "x": 7,
        "y": 1,
      },
      Object {
        "x": 8,
        "y": 1,
      },
      Object {
        "x": 9,
        "y": 1,
      },
    ],
    "usersCount": 1,
  },
  "node": Object {
    "coinbase": Object {
      "coinbase": "82069cc441c42b2706fa5d3129deeb677812e5a5",
    },
    "name": "LOCALHOST",
    "peers": Object {},
  },
}
`;

exports[`Dashboard: index render component with values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dashboard
    appMetadata={
      Object {
        "error": undefined,
        "health": undefined,
        "loading": false,
        "metadata": undefined,
        "nodeInfo": undefined,
      }
    }
    dashboard={
      Object {
        "blockDifficulty": Array [
          Object {
            "x": 0,
            "y": 8192,
          },
          Object {
            "x": 1,
            "y": 131072,
          },
          Object {
            "x": 2,
            "y": 131072,
          },
          Object {
            "x": 3,
            "y": 131072,
          },
          Object {
            "x": 4,
            "y": 131072,
          },
          Object {
            "x": 5,
            "y": 131072,
          },
          Object {
            "x": 6,
            "y": 131072,
          },
          Object {
            "x": 7,
            "y": 131072,
          },
          Object {
            "x": 8,
            "y": 131072,
          },
          Object {
            "x": 9,
            "y": 131072,
          },
        ],
        "blockPropagation": Array [
          Object {
            "x": 0,
            "y": 0,
          },
          Object {
            "x": 1,
            "y": 1512994588,
          },
          Object {
            "x": 2,
            "y": 3358,
          },
          Object {
            "x": 3,
            "y": 19,
          },
          Object {
            "x": 4,
            "y": 1846,
          },
          Object {
            "x": 5,
            "y": 301,
          },
          Object {
            "x": 6,
            "y": 48,
          },
          Object {
            "x": 7,
            "y": 55429,
          },
          Object {
            "x": 8,
            "y": 106195,
          },
          Object {
            "x": 9,
            "y": 58,
          },
        ],
        "contractsCount": 2,
        "lastBlockNumber": 9,
        "transactionTypes": Array [
          Object {
            "type": "FunctionCall",
            "val": 6,
          },
          Object {
            "type": "Transfer",
            "val": 1,
          },
          Object {
            "type": "Contract",
            "val": 2,
          },
        ],
        "transactionsCount": Array [
          Object {
            "x": 0,
            "y": 0,
          },
          Object {
            "x": 1,
            "y": 1,
          },
          Object {
            "x": 2,
            "y": 1,
          },
          Object {
            "x": 3,
            "y": 1,
          },
          Object {
            "x": 4,
            "y": 1,
          },
          Object {
            "x": 5,
            "y": 1,
          },
          Object {
            "x": 6,
            "y": 1,
          },
          Object {
            "x": 7,
            "y": 1,
          },
          Object {
            "x": 8,
            "y": 1,
          },
          Object {
            "x": 9,
            "y": 1,
          },
        ],
        "usersCount": 1,
      }
    }
    node={
      Object {
        "coinbase": Object {
          "coinbase": "82069cc441c42b2706fa5d3129deeb677812e5a5",
        },
        "name": "LOCALHOST",
        "peers": Object {},
      }
    }
    subscribeRoom={[Function]}
    unSubscribeRoom={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Connect(Tour))
          finalStepSelector="#accounts"
          name="dashboard"
          nextPage="accounts"
          steps={
            Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-welcome",
                "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                "title": "Welcome to STRATO!",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#accounts",
                "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                "title": "Adding Users",
                "type": "hover",
              },
            ]
          }
        />,
        <div
          className="row d-flex align-items-center"
        >
          <div
            className="col-sm-6 text-left"
          >
            <h3>
              Node Stats
            </h3>
          </div>
          <div
            className="sys-info-container row col-sm-6 text-right"
            style={
              Object {
                "marginBottom": "10px",
                "marginLeft": "0px",
                "marginRight": "0px",
                "marginTop": "25px",
              }
            }
          >
            <p
              className="text-right"
            >
              System Metrics Loading...
            </p>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <br />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-4"
          >
            <Blueprint.Popover
              arrowSize={30}
              className="full-width"
              content={
                <div
                  className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                >
                  <h5
                    className="pt-callout-title"
                  >
                    API Disconnected
                  </h5>
                  Cannot connect to the Node's API
                </div>
              }
              defaultIsOpen={false}
              hoverCloseDelay={300}
              hoverOpenDelay={150}
              inheritDarkTheme={true}
              inline={false}
              interactionKind={2}
              isDisabled={false}
              isModal={false}
              openOnTargetFocus={true}
              popoverClassName=""
              position={7}
              rootElementTag="span"
              transitionDuration={300}
              useSmartArrowPositioning={true}
              useSmartPositioning={false}
            >
              <withRouter(Connect(NumberCard))
                description={<div />}
                iconClass="fa-triangle-exclamation"
                mode="danger"
                number="DISCONNECTED"
              />
            </Blueprint.Popover>
          </div>
          <div
            className="col-sm-4"
          >
            <Link
              replace={false}
              to="/accounts"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Users"
                iconClass="fa-users"
                number={1}
              />
            </Link>
          </div>
          <div
            className="col-sm-4"
          >
            <Link
              replace={false}
              to="/contracts"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Contracts"
                iconClass="fa-file-contract"
                number={2}
              />
            </Link>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <br />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-4"
          >
            <withRouter(Connect(NumberCard))
              className="smd-pointer"
              description="Node ID"
              iconClass="fa-exclamation-circle"
              mode="pt-intent-warning"
              number="No Identity"
              textSize="h4"
            />
          </div>
          <div
            className="col-sm-8"
          >
            <withRouter(Connect(NodeCard)) />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <hr />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-9 text-left"
          >
            <h3>
              Network Stats
            </h3>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-3"
          >
            <div
              id="networkInfo"
            >
              <Link
                replace={false}
                to=""
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Network"
                  iconClass="fa-exclamation-circle"
                  mode="danger"
                  number="UNKNOWN"
                />
              </Link>
              <br />
              <Link
                replace={false}
                to="/blocks"
              >
                <withRouter(Connect(NumberCard))
                  description="Blocks"
                  iconClass="fa-cube"
                  number={9}
                />
              </Link>
            </div>
          </div>
          <div
            className="col-sm-3"
          >
            <withRouter(Connect(ValidatorsCard)) />
          </div>
          <div
            className="col-sm-6"
          >
            <withRouter(Connect(TransactionList)) />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <hr />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-9 text-left"
          >
            <h3>
              Historical Stats
            </h3>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-3"
          >
            <BarGraph
              data={
                Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1,
                  },
                  Object {
                    "x": 2,
                    "y": 1,
                  },
                  Object {
                    "x": 3,
                    "y": 1,
                  },
                  Object {
                    "x": 4,
                    "y": 1,
                  },
                  Object {
                    "x": 5,
                    "y": 1,
                  },
                  Object {
                    "x": 6,
                    "y": 1,
                  },
                  Object {
                    "x": 7,
                    "y": 1,
                  },
                  Object {
                    "x": 8,
                    "y": 1,
                  },
                  Object {
                    "x": 9,
                    "y": 1,
                  },
                ]
              }
              identifier="TxCount"
              label="Transactions per Last 15 Blocks"
              number={
                Object {
                  "x": 0,
                  "y": 0,
                }
              }
            />
          </div>
          <div
            className="col-sm-3"
          >
            <PieChart
              data={
                Array [
                  Object {
                    "type": "FunctionCall",
                    "val": 6,
                  },
                  Object {
                    "type": "Transfer",
                    "val": 1,
                  },
                  Object {
                    "type": "Contract",
                    "val": 2,
                  },
                ]
              }
            />
          </div>
          <div
            className="col-sm-3"
          >
            <BarGraph
              data={
                Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1512994588,
                  },
                  Object {
                    "x": 2,
                    "y": 3358,
                  },
                  Object {
                    "x": 3,
                    "y": 19,
                  },
                  Object {
                    "x": 4,
                    "y": 1846,
                  },
                  Object {
                    "x": 5,
                    "y": 301,
                  },
                  Object {
                    "x": 6,
                    "y": 48,
                  },
                  Object {
                    "x": 7,
                    "y": 55429,
                  },
                  Object {
                    "x": 8,
                    "y": 106195,
                  },
                  Object {
                    "x": 9,
                    "y": 58,
                  },
                ]
              }
              identifier="BlockProp"
              label="Block Interval Last 15 Blocks"
              units="s"
            />
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
      "id": "tour-welcome",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "finalStepSelector": "#accounts",
          "name": "dashboard",
          "nextPage": "accounts",
          "steps": Array [
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-welcome",
              "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
              "title": "Welcome to STRATO!",
              "type": "hover",
            },
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#accounts",
              "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
              "title": "Adding Users",
              "type": "hover",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6 text-left"
            >
              <h3>
                Node Stats
              </h3>
            </div>,
            <div
              className="sys-info-container row col-sm-6 text-right"
              style={
                Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                }
              }
            >
              <p
                className="text-right"
              >
                System Metrics Loading...
              </p>
            </div>,
          ],
          "className": "row d-flex align-items-center",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Node Stats
              </h3>,
              "className": "col-sm-6 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Node Stats",
              },
              "ref": null,
              "rendered": "Node Stats",
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <p
                className="text-right"
              >
                System Metrics Loading...
              </p>,
              "className": "sys-info-container row col-sm-6 text-right",
              "style": Object {
                "marginBottom": "10px",
                "marginLeft": "0px",
                "marginRight": "0px",
                "marginTop": "25px",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "System Metrics Loading...",
                "className": "text-right",
              },
              "ref": null,
              "rendered": "System Metrics Loading...",
              "type": "p",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <br />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <br />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-4"
            >
              <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>
            </div>,
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />
              </Link>
            </div>,
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />
              </Link>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "arrowSize": 30,
                "children": <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />,
                "className": "full-width",
                "content": <div
                  className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                >
                  <h5
                    className="pt-callout-title"
                  >
                    API Disconnected
                  </h5>
                  Cannot connect to the Node's API
                </div>,
                "defaultIsOpen": false,
                "hoverCloseDelay": 300,
                "hoverOpenDelay": 150,
                "inheritDarkTheme": true,
                "inline": false,
                "interactionKind": 2,
                "isDisabled": false,
                "isModal": false,
                "openOnTargetFocus": true,
                "popoverClassName": "",
                "position": 7,
                "rootElementTag": "span",
                "transitionDuration": 300,
                "useSmartArrowPositioning": true,
                "useSmartPositioning": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "description": <div />,
                  "iconClass": "fa-triangle-exclamation",
                  "mode": "danger",
                  "number": "DISCONNECTED",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />
              </Link>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />,
                "replace": false,
                "to": "/accounts",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Users",
                  "iconClass": "fa-users",
                  "number": 1,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />
              </Link>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />,
                "replace": false,
                "to": "/contracts",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Contracts",
                  "iconClass": "fa-file-contract",
                  "number": 2,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <br />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <br />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-4"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />
            </div>,
            <div
              className="col-sm-8"
            >
              <withRouter(Connect(NodeCard)) />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "smd-pointer",
                "description": "Node ID",
                "iconClass": "fa-exclamation-circle",
                "mode": "pt-intent-warning",
                "number": "No Identity",
                "textSize": "h4",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(NodeCard)) />,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <hr />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <hr />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-9 text-left"
          >
            <h3>
              Network Stats
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Network Stats
            </h3>,
            "className": "col-sm-9 text-left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Network Stats",
            },
            "ref": null,
            "rendered": "Network Stats",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-3"
            >
              <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={9}
                  />
                </Link>
              </div>
            </div>,
            <div
              className="col-sm-3"
            >
              <withRouter(Connect(ValidatorsCard)) />
            </div>,
            <div
              className="col-sm-6"
            >
              <withRouter(Connect(TransactionList)) />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={9}
                  />
                </Link>
              </div>,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>,
                  <br />,
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />
                  </Link>,
                ],
                "id": "networkInfo",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />,
                    "replace": false,
                    "to": "",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "smd-pointer",
                      "description": "Network",
                      "iconClass": "fa-exclamation-circle",
                      "mode": "danger",
                      "number": "UNKNOWN",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />,
                    "replace": false,
                    "to": "/blocks",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "description": "Blocks",
                      "iconClass": "fa-cube",
                      "number": 9,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(ValidatorsCard)) />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(TransactionList)) />,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <hr />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <hr />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-9 text-left"
          >
            <h3>
              Historical Stats
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Historical Stats
            </h3>,
            "className": "col-sm-9 text-left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Historical Stats",
            },
            "ref": null,
            "rendered": "Historical Stats",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ]
                }
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
              />
            </div>,
            <div
              className="col-sm-3"
            >
              <PieChart
                data={
                  Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ]
                }
              />
            </div>,
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ]
                }
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ]
                }
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1,
                  },
                  Object {
                    "x": 2,
                    "y": 1,
                  },
                  Object {
                    "x": 3,
                    "y": 1,
                  },
                  Object {
                    "x": 4,
                    "y": 1,
                  },
                  Object {
                    "x": 5,
                    "y": 1,
                  },
                  Object {
                    "x": 6,
                    "y": 1,
                  },
                  Object {
                    "x": 7,
                    "y": 1,
                  },
                  Object {
                    "x": 8,
                    "y": 1,
                  },
                  Object {
                    "x": 9,
                    "y": 1,
                  },
                ],
                "identifier": "TxCount",
                "label": "Transactions per Last 15 Blocks",
                "number": Object {
                  "x": 0,
                  "y": 0,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <PieChart
                data={
                  Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ]
                }
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [
                  Object {
                    "type": "FunctionCall",
                    "val": 6,
                  },
                  Object {
                    "type": "Transfer",
                    "val": 1,
                  },
                  Object {
                    "type": "Contract",
                    "val": 2,
                  },
                ],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ]
                }
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [
                  Object {
                    "x": 0,
                    "y": 0,
                  },
                  Object {
                    "x": 1,
                    "y": 1512994588,
                  },
                  Object {
                    "x": 2,
                    "y": 3358,
                  },
                  Object {
                    "x": 3,
                    "y": 19,
                  },
                  Object {
                    "x": 4,
                    "y": 1846,
                  },
                  Object {
                    "x": 5,
                    "y": 301,
                  },
                  Object {
                    "x": 6,
                    "y": 48,
                  },
                  Object {
                    "x": 7,
                    "y": 55429,
                  },
                  Object {
                    "x": 8,
                    "y": 106195,
                  },
                  Object {
                    "x": 9,
                    "y": 58,
                  },
                ],
                "identifier": "BlockProp",
                "label": "Block Interval Last 15 Blocks",
                "units": "s",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Connect(Tour))
            finalStepSelector="#accounts"
            name="dashboard"
            nextPage="accounts"
            steps={
              Array [
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-welcome",
                  "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                  "title": "Welcome to STRATO!",
                  "type": "hover",
                },
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#accounts",
                  "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                  "title": "Adding Users",
                  "type": "hover",
                },
              ]
            }
          />,
          <div
            className="row d-flex align-items-center"
          >
            <div
              className="col-sm-6 text-left"
            >
              <h3>
                Node Stats
              </h3>
            </div>
            <div
              className="sys-info-container row col-sm-6 text-right"
              style={
                Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                }
              }
            >
              <p
                className="text-right"
              >
                System Metrics Loading...
              </p>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <br />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-4"
            >
              <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>
            </div>
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={1}
                />
              </Link>
            </div>
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={2}
                />
              </Link>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <br />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-4"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />
            </div>
            <div
              className="col-sm-8"
            >
              <withRouter(Connect(NodeCard)) />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <hr />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-9 text-left"
            >
              <h3>
                Network Stats
              </h3>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-3"
            >
              <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={9}
                  />
                </Link>
              </div>
            </div>
            <div
              className="col-sm-3"
            >
              <withRouter(Connect(ValidatorsCard)) />
            </div>
            <div
              className="col-sm-6"
            >
              <withRouter(Connect(TransactionList)) />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <hr />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-9 text-left"
            >
              <h3>
                Historical Stats
              </h3>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ]
                }
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={
                  Object {
                    "x": 0,
                    "y": 0,
                  }
                }
              />
            </div>
            <div
              className="col-sm-3"
            >
              <PieChart
                data={
                  Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ]
                }
              />
            </div>
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={
                  Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ]
                }
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
        "id": "tour-welcome",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "finalStepSelector": "#accounts",
            "name": "dashboard",
            "nextPage": "accounts",
            "steps": Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-welcome",
                "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                "title": "Welcome to STRATO!",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#accounts",
                "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                "title": "Adding Users",
                "type": "hover",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6 text-left"
              >
                <h3>
                  Node Stats
                </h3>
              </div>,
              <div
                className="sys-info-container row col-sm-6 text-right"
                style={
                  Object {
                    "marginBottom": "10px",
                    "marginLeft": "0px",
                    "marginRight": "0px",
                    "marginTop": "25px",
                  }
                }
              >
                <p
                  className="text-right"
                >
                  System Metrics Loading...
                </p>
              </div>,
            ],
            "className": "row d-flex align-items-center",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Node Stats
                </h3>,
                "className": "col-sm-6 text-left",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Node Stats",
                },
                "ref": null,
                "rendered": "Node Stats",
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <p
                  className="text-right"
                >
                  System Metrics Loading...
                </p>,
                "className": "sys-info-container row col-sm-6 text-right",
                "style": Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "System Metrics Loading...",
                  "className": "text-right",
                },
                "ref": null,
                "rendered": "System Metrics Loading...",
                "type": "p",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <br />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <br />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-4"
              >
                <Blueprint.Popover
                  arrowSize={30}
                  className="full-width"
                  content={
                    <div
                      className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                    >
                      <h5
                        className="pt-callout-title"
                      >
                        API Disconnected
                      </h5>
                      Cannot connect to the Node's API
                    </div>
                  }
                  defaultIsOpen={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  inline={false}
                  interactionKind={2}
                  isDisabled={false}
                  isModal={false}
                  openOnTargetFocus={true}
                  popoverClassName=""
                  position={7}
                  rootElementTag="span"
                  transitionDuration={300}
                  useSmartArrowPositioning={true}
                  useSmartPositioning={false}
                >
                  <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />
                </Blueprint.Popover>
              </div>,
              <div
                className="col-sm-4"
              >
                <Link
                  replace={false}
                  to="/accounts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={1}
                  />
                </Link>
              </div>,
              <div
                className="col-sm-4"
              >
                <Link
                  replace={false}
                  to="/contracts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={2}
                  />
                </Link>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Popover
                  arrowSize={30}
                  className="full-width"
                  content={
                    <div
                      className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                    >
                      <h5
                        className="pt-callout-title"
                      >
                        API Disconnected
                      </h5>
                      Cannot connect to the Node's API
                    </div>
                  }
                  defaultIsOpen={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  inline={false}
                  interactionKind={2}
                  isDisabled={false}
                  isModal={false}
                  openOnTargetFocus={true}
                  popoverClassName=""
                  position={7}
                  rootElementTag="span"
                  transitionDuration={300}
                  useSmartArrowPositioning={true}
                  useSmartPositioning={false}
                >
                  <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />
                </Blueprint.Popover>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "arrowSize": 30,
                  "children": <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />,
                  "className": "full-width",
                  "content": <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>,
                  "defaultIsOpen": false,
                  "hoverCloseDelay": 300,
                  "hoverOpenDelay": 150,
                  "inheritDarkTheme": true,
                  "inline": false,
                  "interactionKind": 2,
                  "isDisabled": false,
                  "isModal": false,
                  "openOnTargetFocus": true,
                  "popoverClassName": "",
                  "position": 7,
                  "rootElementTag": "span",
                  "transitionDuration": 300,
                  "useSmartArrowPositioning": true,
                  "useSmartPositioning": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "description": <div />,
                    "iconClass": "fa-triangle-exclamation",
                    "mode": "danger",
                    "number": "DISCONNECTED",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/accounts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={1}
                  />
                </Link>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={1}
                  />,
                  "replace": false,
                  "to": "/accounts",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "smd-pointer",
                    "description": "Users",
                    "iconClass": "fa-users",
                    "number": 1,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/contracts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={2}
                  />
                </Link>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={2}
                  />,
                  "replace": false,
                  "to": "/contracts",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "smd-pointer",
                    "description": "Contracts",
                    "iconClass": "fa-file-contract",
                    "number": 2,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <br />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <br />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-4"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Node ID"
                  iconClass="fa-exclamation-circle"
                  mode="pt-intent-warning"
                  number="No Identity"
                  textSize="h4"
                />
              </div>,
              <div
                className="col-sm-8"
              >
                <withRouter(Connect(NodeCard)) />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Node ID"
                  iconClass="fa-exclamation-circle"
                  mode="pt-intent-warning"
                  number="No Identity"
                  textSize="h4"
                />,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Node ID",
                  "iconClass": "fa-exclamation-circle",
                  "mode": "pt-intent-warning",
                  "number": "No Identity",
                  "textSize": "h4",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(NodeCard)) />,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <hr />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <hr />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-9 text-left"
            >
              <h3>
                Network Stats
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Network Stats
              </h3>,
              "className": "col-sm-9 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Network Stats",
              },
              "ref": null,
              "rendered": "Network Stats",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-3"
              >
                <div
                  id="networkInfo"
                >
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>
                  <br />
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />
                  </Link>
                </div>
              </div>,
              <div
                className="col-sm-3"
              >
                <withRouter(Connect(ValidatorsCard)) />
              </div>,
              <div
                className="col-sm-6"
              >
                <withRouter(Connect(TransactionList)) />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  id="networkInfo"
                >
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>
                  <br />
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={9}
                    />
                  </Link>
                </div>,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Link
                      replace={false}
                      to=""
                    >
                      <withRouter(Connect(NumberCard))
                        className="smd-pointer"
                        description="Network"
                        iconClass="fa-exclamation-circle"
                        mode="danger"
                        number="UNKNOWN"
                      />
                    </Link>,
                    <br />,
                    <Link
                      replace={false}
                      to="/blocks"
                    >
                      <withRouter(Connect(NumberCard))
                        description="Blocks"
                        iconClass="fa-cube"
                        number={9}
                      />
                    </Link>,
                  ],
                  "id": "networkInfo",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <withRouter(Connect(NumberCard))
                        className="smd-pointer"
                        description="Network"
                        iconClass="fa-exclamation-circle"
                        mode="danger"
                        number="UNKNOWN"
                      />,
                      "replace": false,
                      "to": "",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "smd-pointer",
                        "description": "Network",
                        "iconClass": "fa-exclamation-circle",
                        "mode": "danger",
                        "number": "UNKNOWN",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <withRouter(Connect(NumberCard))
                        description="Blocks"
                        iconClass="fa-cube"
                        number={9}
                      />,
                      "replace": false,
                      "to": "/blocks",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "description": "Blocks",
                        "iconClass": "fa-cube",
                        "number": 9,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(ValidatorsCard)) />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(TransactionList)) />,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <hr />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <hr />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-9 text-left"
            >
              <h3>
                Historical Stats
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Historical Stats
              </h3>,
              "className": "col-sm-9 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Historical Stats",
              },
              "ref": null,
              "rendered": "Historical Stats",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-3"
              >
                <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1,
                      },
                      Object {
                        "x": 2,
                        "y": 1,
                      },
                      Object {
                        "x": 3,
                        "y": 1,
                      },
                      Object {
                        "x": 4,
                        "y": 1,
                      },
                      Object {
                        "x": 5,
                        "y": 1,
                      },
                      Object {
                        "x": 6,
                        "y": 1,
                      },
                      Object {
                        "x": 7,
                        "y": 1,
                      },
                      Object {
                        "x": 8,
                        "y": 1,
                      },
                      Object {
                        "x": 9,
                        "y": 1,
                      },
                    ]
                  }
                  identifier="TxCount"
                  label="Transactions per Last 15 Blocks"
                  number={
                    Object {
                      "x": 0,
                      "y": 0,
                    }
                  }
                />
              </div>,
              <div
                className="col-sm-3"
              >
                <PieChart
                  data={
                    Array [
                      Object {
                        "type": "FunctionCall",
                        "val": 6,
                      },
                      Object {
                        "type": "Transfer",
                        "val": 1,
                      },
                      Object {
                        "type": "Contract",
                        "val": 2,
                      },
                    ]
                  }
                />
              </div>,
              <div
                className="col-sm-3"
              >
                <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1512994588,
                      },
                      Object {
                        "x": 2,
                        "y": 3358,
                      },
                      Object {
                        "x": 3,
                        "y": 19,
                      },
                      Object {
                        "x": 4,
                        "y": 1846,
                      },
                      Object {
                        "x": 5,
                        "y": 301,
                      },
                      Object {
                        "x": 6,
                        "y": 48,
                      },
                      Object {
                        "x": 7,
                        "y": 55429,
                      },
                      Object {
                        "x": 8,
                        "y": 106195,
                      },
                      Object {
                        "x": 9,
                        "y": 58,
                      },
                    ]
                  }
                  identifier="BlockProp"
                  label="Block Interval Last 15 Blocks"
                  units="s"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1,
                      },
                      Object {
                        "x": 2,
                        "y": 1,
                      },
                      Object {
                        "x": 3,
                        "y": 1,
                      },
                      Object {
                        "x": 4,
                        "y": 1,
                      },
                      Object {
                        "x": 5,
                        "y": 1,
                      },
                      Object {
                        "x": 6,
                        "y": 1,
                      },
                      Object {
                        "x": 7,
                        "y": 1,
                      },
                      Object {
                        "x": 8,
                        "y": 1,
                      },
                      Object {
                        "x": 9,
                        "y": 1,
                      },
                    ]
                  }
                  identifier="TxCount"
                  label="Transactions per Last 15 Blocks"
                  number={
                    Object {
                      "x": 0,
                      "y": 0,
                    }
                  }
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1,
                    },
                    Object {
                      "x": 2,
                      "y": 1,
                    },
                    Object {
                      "x": 3,
                      "y": 1,
                    },
                    Object {
                      "x": 4,
                      "y": 1,
                    },
                    Object {
                      "x": 5,
                      "y": 1,
                    },
                    Object {
                      "x": 6,
                      "y": 1,
                    },
                    Object {
                      "x": 7,
                      "y": 1,
                    },
                    Object {
                      "x": 8,
                      "y": 1,
                    },
                    Object {
                      "x": 9,
                      "y": 1,
                    },
                  ],
                  "identifier": "TxCount",
                  "label": "Transactions per Last 15 Blocks",
                  "number": Object {
                    "x": 0,
                    "y": 0,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <PieChart
                  data={
                    Array [
                      Object {
                        "type": "FunctionCall",
                        "val": 6,
                      },
                      Object {
                        "type": "Transfer",
                        "val": 1,
                      },
                      Object {
                        "type": "Contract",
                        "val": 2,
                      },
                    ]
                  }
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [
                    Object {
                      "type": "FunctionCall",
                      "val": 6,
                    },
                    Object {
                      "type": "Transfer",
                      "val": 1,
                    },
                    Object {
                      "type": "Contract",
                      "val": 2,
                    },
                  ],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <BarGraph
                  data={
                    Array [
                      Object {
                        "x": 0,
                        "y": 0,
                      },
                      Object {
                        "x": 1,
                        "y": 1512994588,
                      },
                      Object {
                        "x": 2,
                        "y": 3358,
                      },
                      Object {
                        "x": 3,
                        "y": 19,
                      },
                      Object {
                        "x": 4,
                        "y": 1846,
                      },
                      Object {
                        "x": 5,
                        "y": 301,
                      },
                      Object {
                        "x": 6,
                        "y": 48,
                      },
                      Object {
                        "x": 7,
                        "y": 55429,
                      },
                      Object {
                        "x": 8,
                        "y": 106195,
                      },
                      Object {
                        "x": 9,
                        "y": 58,
                      },
                    ]
                  }
                  identifier="BlockProp"
                  label="Block Interval Last 15 Blocks"
                  units="s"
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [
                    Object {
                      "x": 0,
                      "y": 0,
                    },
                    Object {
                      "x": 1,
                      "y": 1512994588,
                    },
                    Object {
                      "x": 2,
                      "y": 3358,
                    },
                    Object {
                      "x": 3,
                      "y": 19,
                    },
                    Object {
                      "x": 4,
                      "y": 1846,
                    },
                    Object {
                      "x": 5,
                      "y": 301,
                    },
                    Object {
                      "x": 6,
                      "y": 48,
                    },
                    Object {
                      "x": 7,
                      "y": 55429,
                    },
                    Object {
                      "x": 8,
                      "y": 106195,
                    },
                    Object {
                      "x": 9,
                      "y": 58,
                    },
                  ],
                  "identifier": "BlockProp",
                  "label": "Block Interval Last 15 Blocks",
                  "units": "s",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Dashboard: index render component without values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Dashboard
    appMetadata={
      Object {
        "error": undefined,
        "health": undefined,
        "loading": false,
        "metadata": undefined,
        "nodeInfo": undefined,
      }
    }
    dashboard={
      Object {
        "blockDifficulty": Array [],
        "blockPropagation": Array [],
        "transactionTypes": Array [],
        "transactionsCount": Array [],
      }
    }
    node={
      Object {
        "coinbase": "",
        "name": "LOCALHOST",
        "peers": Object {},
      }
    }
    subscribeRoom={[Function]}
    unSubscribeRoom={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Connect(Tour))
          finalStepSelector="#accounts"
          name="dashboard"
          nextPage="accounts"
          steps={
            Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-welcome",
                "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                "title": "Welcome to STRATO!",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#accounts",
                "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                "title": "Adding Users",
                "type": "hover",
              },
            ]
          }
        />,
        <div
          className="row d-flex align-items-center"
        >
          <div
            className="col-sm-6 text-left"
          >
            <h3>
              Node Stats
            </h3>
          </div>
          <div
            className="sys-info-container row col-sm-6 text-right"
            style={
              Object {
                "marginBottom": "10px",
                "marginLeft": "0px",
                "marginRight": "0px",
                "marginTop": "25px",
              }
            }
          >
            <p
              className="text-right"
            >
              System Metrics Loading...
            </p>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <br />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-4"
          >
            <Blueprint.Popover
              arrowSize={30}
              className="full-width"
              content={
                <div
                  className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                >
                  <h5
                    className="pt-callout-title"
                  >
                    API Disconnected
                  </h5>
                  Cannot connect to the Node's API
                </div>
              }
              defaultIsOpen={false}
              hoverCloseDelay={300}
              hoverOpenDelay={150}
              inheritDarkTheme={true}
              inline={false}
              interactionKind={2}
              isDisabled={false}
              isModal={false}
              openOnTargetFocus={true}
              popoverClassName=""
              position={7}
              rootElementTag="span"
              transitionDuration={300}
              useSmartArrowPositioning={true}
              useSmartPositioning={false}
            >
              <withRouter(Connect(NumberCard))
                description={<div />}
                iconClass="fa-triangle-exclamation"
                mode="danger"
                number="DISCONNECTED"
              />
            </Blueprint.Popover>
          </div>
          <div
            className="col-sm-4"
          >
            <Link
              replace={false}
              to="/accounts"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Users"
                iconClass="fa-users"
                number={undefined}
              />
            </Link>
          </div>
          <div
            className="col-sm-4"
          >
            <Link
              replace={false}
              to="/contracts"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Contracts"
                iconClass="fa-file-contract"
                number={undefined}
              />
            </Link>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <br />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-4"
          >
            <withRouter(Connect(NumberCard))
              className="smd-pointer"
              description="Node ID"
              iconClass="fa-exclamation-circle"
              mode="pt-intent-warning"
              number="No Identity"
              textSize="h4"
            />
          </div>
          <div
            className="col-sm-8"
          >
            <withRouter(Connect(NodeCard)) />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <hr />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-9 text-left"
          >
            <h3>
              Network Stats
            </h3>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-3"
          >
            <div
              id="networkInfo"
            >
              <Link
                replace={false}
                to=""
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Network"
                  iconClass="fa-exclamation-circle"
                  mode="danger"
                  number="UNKNOWN"
                />
              </Link>
              <br />
              <Link
                replace={false}
                to="/blocks"
              >
                <withRouter(Connect(NumberCard))
                  description="Blocks"
                  iconClass="fa-cube"
                  number={undefined}
                />
              </Link>
            </div>
          </div>
          <div
            className="col-sm-3"
          >
            <withRouter(Connect(ValidatorsCard)) />
          </div>
          <div
            className="col-sm-6"
          >
            <withRouter(Connect(TransactionList)) />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <hr />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-9 text-left"
          >
            <h3>
              Historical Stats
            </h3>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-3"
          >
            <BarGraph
              data={Array []}
              identifier="TxCount"
              label="Transactions per Last 15 Blocks"
              number={undefined}
            />
          </div>
          <div
            className="col-sm-3"
          >
            <PieChart
              data={Array []}
            />
          </div>
          <div
            className="col-sm-3"
          >
            <BarGraph
              data={Array []}
              identifier="BlockProp"
              label="Block Interval Last 15 Blocks"
              units="s"
            />
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
      "id": "tour-welcome",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "finalStepSelector": "#accounts",
          "name": "dashboard",
          "nextPage": "accounts",
          "steps": Array [
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-welcome",
              "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
              "title": "Welcome to STRATO!",
              "type": "hover",
            },
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#accounts",
              "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
              "title": "Adding Users",
              "type": "hover",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6 text-left"
            >
              <h3>
                Node Stats
              </h3>
            </div>,
            <div
              className="sys-info-container row col-sm-6 text-right"
              style={
                Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                }
              }
            >
              <p
                className="text-right"
              >
                System Metrics Loading...
              </p>
            </div>,
          ],
          "className": "row d-flex align-items-center",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Node Stats
              </h3>,
              "className": "col-sm-6 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Node Stats",
              },
              "ref": null,
              "rendered": "Node Stats",
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <p
                className="text-right"
              >
                System Metrics Loading...
              </p>,
              "className": "sys-info-container row col-sm-6 text-right",
              "style": Object {
                "marginBottom": "10px",
                "marginLeft": "0px",
                "marginRight": "0px",
                "marginTop": "25px",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "System Metrics Loading...",
                "className": "text-right",
              },
              "ref": null,
              "rendered": "System Metrics Loading...",
              "type": "p",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <br />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <br />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-4"
            >
              <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>
            </div>,
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={undefined}
                />
              </Link>
            </div>,
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={undefined}
                />
              </Link>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "arrowSize": 30,
                "children": <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />,
                "className": "full-width",
                "content": <div
                  className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                >
                  <h5
                    className="pt-callout-title"
                  >
                    API Disconnected
                  </h5>
                  Cannot connect to the Node's API
                </div>,
                "defaultIsOpen": false,
                "hoverCloseDelay": 300,
                "hoverOpenDelay": 150,
                "inheritDarkTheme": true,
                "inline": false,
                "interactionKind": 2,
                "isDisabled": false,
                "isModal": false,
                "openOnTargetFocus": true,
                "popoverClassName": "",
                "position": 7,
                "rootElementTag": "span",
                "transitionDuration": 300,
                "useSmartArrowPositioning": true,
                "useSmartPositioning": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "description": <div />,
                  "iconClass": "fa-triangle-exclamation",
                  "mode": "danger",
                  "number": "DISCONNECTED",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={undefined}
                />
              </Link>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={undefined}
                />,
                "replace": false,
                "to": "/accounts",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Users",
                  "iconClass": "fa-users",
                  "number": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={undefined}
                />
              </Link>,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={undefined}
                />,
                "replace": false,
                "to": "/contracts",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Contracts",
                  "iconClass": "fa-file-contract",
                  "number": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <br />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <br />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-4"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />
            </div>,
            <div
              className="col-sm-8"
            >
              <withRouter(Connect(NodeCard)) />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />,
              "className": "col-sm-4",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "smd-pointer",
                "description": "Node ID",
                "iconClass": "fa-exclamation-circle",
                "mode": "pt-intent-warning",
                "number": "No Identity",
                "textSize": "h4",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(NodeCard)) />,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <hr />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <hr />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-9 text-left"
          >
            <h3>
              Network Stats
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Network Stats
            </h3>,
            "className": "col-sm-9 text-left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Network Stats",
            },
            "ref": null,
            "rendered": "Network Stats",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-3"
            >
              <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={undefined}
                  />
                </Link>
              </div>
            </div>,
            <div
              className="col-sm-3"
            >
              <withRouter(Connect(ValidatorsCard)) />
            </div>,
            <div
              className="col-sm-6"
            >
              <withRouter(Connect(TransactionList)) />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={undefined}
                  />
                </Link>
              </div>,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>,
                  <br />,
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={undefined}
                    />
                  </Link>,
                ],
                "id": "networkInfo",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />,
                    "replace": false,
                    "to": "",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "className": "smd-pointer",
                      "description": "Network",
                      "iconClass": "fa-exclamation-circle",
                      "mode": "danger",
                      "number": "UNKNOWN",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={undefined}
                    />,
                    "replace": false,
                    "to": "/blocks",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "description": "Blocks",
                      "iconClass": "fa-cube",
                      "number": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(ValidatorsCard)) />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <withRouter(Connect(TransactionList)) />,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <hr />
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <hr />,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-9 text-left"
          >
            <h3>
              Historical Stats
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Historical Stats
            </h3>,
            "className": "col-sm-9 text-left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Historical Stats",
            },
            "ref": null,
            "rendered": "Historical Stats",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={Array []}
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={undefined}
              />
            </div>,
            <div
              className="col-sm-3"
            >
              <PieChart
                data={Array []}
              />
            </div>,
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={Array []}
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <BarGraph
                data={Array []}
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={undefined}
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [],
                "identifier": "TxCount",
                "label": "Transactions per Last 15 Blocks",
                "number": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <PieChart
                data={Array []}
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <BarGraph
                data={Array []}
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />,
              "className": "col-sm-3",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "data": Array [],
                "identifier": "BlockProp",
                "label": "Block Interval Last 15 Blocks",
                "units": "s",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Connect(Tour))
            finalStepSelector="#accounts"
            name="dashboard"
            nextPage="accounts"
            steps={
              Array [
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-welcome",
                  "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                  "title": "Welcome to STRATO!",
                  "type": "hover",
                },
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#accounts",
                  "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                  "title": "Adding Users",
                  "type": "hover",
                },
              ]
            }
          />,
          <div
            className="row d-flex align-items-center"
          >
            <div
              className="col-sm-6 text-left"
            >
              <h3>
                Node Stats
              </h3>
            </div>
            <div
              className="sys-info-container row col-sm-6 text-right"
              style={
                Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                }
              }
            >
              <p
                className="text-right"
              >
                System Metrics Loading...
              </p>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <br />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-4"
            >
              <Blueprint.Popover
                arrowSize={30}
                className="full-width"
                content={
                  <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>
                }
                defaultIsOpen={false}
                hoverCloseDelay={300}
                hoverOpenDelay={150}
                inheritDarkTheme={true}
                inline={false}
                interactionKind={2}
                isDisabled={false}
                isModal={false}
                openOnTargetFocus={true}
                popoverClassName=""
                position={7}
                rootElementTag="span"
                transitionDuration={300}
                useSmartArrowPositioning={true}
                useSmartPositioning={false}
              >
                <withRouter(Connect(NumberCard))
                  description={<div />}
                  iconClass="fa-triangle-exclamation"
                  mode="danger"
                  number="DISCONNECTED"
                />
              </Blueprint.Popover>
            </div>
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/accounts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Users"
                  iconClass="fa-users"
                  number={undefined}
                />
              </Link>
            </div>
            <div
              className="col-sm-4"
            >
              <Link
                replace={false}
                to="/contracts"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Contracts"
                  iconClass="fa-file-contract"
                  number={undefined}
                />
              </Link>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <br />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-4"
            >
              <withRouter(Connect(NumberCard))
                className="smd-pointer"
                description="Node ID"
                iconClass="fa-exclamation-circle"
                mode="pt-intent-warning"
                number="No Identity"
                textSize="h4"
              />
            </div>
            <div
              className="col-sm-8"
            >
              <withRouter(Connect(NodeCard)) />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <hr />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-9 text-left"
            >
              <h3>
                Network Stats
              </h3>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-3"
            >
              <div
                id="networkInfo"
              >
                <Link
                  replace={false}
                  to=""
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Network"
                    iconClass="fa-exclamation-circle"
                    mode="danger"
                    number="UNKNOWN"
                  />
                </Link>
                <br />
                <Link
                  replace={false}
                  to="/blocks"
                >
                  <withRouter(Connect(NumberCard))
                    description="Blocks"
                    iconClass="fa-cube"
                    number={undefined}
                  />
                </Link>
              </div>
            </div>
            <div
              className="col-sm-3"
            >
              <withRouter(Connect(ValidatorsCard)) />
            </div>
            <div
              className="col-sm-6"
            >
              <withRouter(Connect(TransactionList)) />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <hr />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-9 text-left"
            >
              <h3>
                Historical Stats
              </h3>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={Array []}
                identifier="TxCount"
                label="Transactions per Last 15 Blocks"
                number={undefined}
              />
            </div>
            <div
              className="col-sm-3"
            >
              <PieChart
                data={Array []}
              />
            </div>
            <div
              className="col-sm-3"
            >
              <BarGraph
                data={Array []}
                identifier="BlockProp"
                label="Block Interval Last 15 Blocks"
                units="s"
              />
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
        "id": "tour-welcome",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "finalStepSelector": "#accounts",
            "name": "dashboard",
            "nextPage": "accounts",
            "steps": Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-welcome",
                "text": "<strong>STRATO</strong> makes it easy to create and manage your custom blockchains.<br><br><strong>Ready to get started?</strong>",
                "title": "Welcome to STRATO!",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#accounts",
                "text": "Before you write a Smart Contract, you must add some users that your Smart Contract will interact with.<br><br>For example, if you are splitting the bill for a monthly apartment rental, you might add <i>Roommate 1</i>, <i>Roommate 2</i>, and <i> Roommate 3.</i>",
                "title": "Adding Users",
                "type": "hover",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6 text-left"
              >
                <h3>
                  Node Stats
                </h3>
              </div>,
              <div
                className="sys-info-container row col-sm-6 text-right"
                style={
                  Object {
                    "marginBottom": "10px",
                    "marginLeft": "0px",
                    "marginRight": "0px",
                    "marginTop": "25px",
                  }
                }
              >
                <p
                  className="text-right"
                >
                  System Metrics Loading...
                </p>
              </div>,
            ],
            "className": "row d-flex align-items-center",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Node Stats
                </h3>,
                "className": "col-sm-6 text-left",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Node Stats",
                },
                "ref": null,
                "rendered": "Node Stats",
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <p
                  className="text-right"
                >
                  System Metrics Loading...
                </p>,
                "className": "sys-info-container row col-sm-6 text-right",
                "style": Object {
                  "marginBottom": "10px",
                  "marginLeft": "0px",
                  "marginRight": "0px",
                  "marginTop": "25px",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "System Metrics Loading...",
                  "className": "text-right",
                },
                "ref": null,
                "rendered": "System Metrics Loading...",
                "type": "p",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <br />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <br />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-4"
              >
                <Blueprint.Popover
                  arrowSize={30}
                  className="full-width"
                  content={
                    <div
                      className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                    >
                      <h5
                        className="pt-callout-title"
                      >
                        API Disconnected
                      </h5>
                      Cannot connect to the Node's API
                    </div>
                  }
                  defaultIsOpen={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  inline={false}
                  interactionKind={2}
                  isDisabled={false}
                  isModal={false}
                  openOnTargetFocus={true}
                  popoverClassName=""
                  position={7}
                  rootElementTag="span"
                  transitionDuration={300}
                  useSmartArrowPositioning={true}
                  useSmartPositioning={false}
                >
                  <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />
                </Blueprint.Popover>
              </div>,
              <div
                className="col-sm-4"
              >
                <Link
                  replace={false}
                  to="/accounts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={undefined}
                  />
                </Link>
              </div>,
              <div
                className="col-sm-4"
              >
                <Link
                  replace={false}
                  to="/contracts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={undefined}
                  />
                </Link>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Popover
                  arrowSize={30}
                  className="full-width"
                  content={
                    <div
                      className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                    >
                      <h5
                        className="pt-callout-title"
                      >
                        API Disconnected
                      </h5>
                      Cannot connect to the Node's API
                    </div>
                  }
                  defaultIsOpen={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  inline={false}
                  interactionKind={2}
                  isDisabled={false}
                  isModal={false}
                  openOnTargetFocus={true}
                  popoverClassName=""
                  position={7}
                  rootElementTag="span"
                  transitionDuration={300}
                  useSmartArrowPositioning={true}
                  useSmartPositioning={false}
                >
                  <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />
                </Blueprint.Popover>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "arrowSize": 30,
                  "children": <withRouter(Connect(NumberCard))
                    description={<div />}
                    iconClass="fa-triangle-exclamation"
                    mode="danger"
                    number="DISCONNECTED"
                  />,
                  "className": "full-width",
                  "content": <div
                    className="pt-dark pt-callout smd-pad-8 pt-icon-info-sign pt-intent-danger"
                  >
                    <h5
                      className="pt-callout-title"
                    >
                      API Disconnected
                    </h5>
                    Cannot connect to the Node's API
                  </div>,
                  "defaultIsOpen": false,
                  "hoverCloseDelay": 300,
                  "hoverOpenDelay": 150,
                  "inheritDarkTheme": true,
                  "inline": false,
                  "interactionKind": 2,
                  "isDisabled": false,
                  "isModal": false,
                  "openOnTargetFocus": true,
                  "popoverClassName": "",
                  "position": 7,
                  "rootElementTag": "span",
                  "transitionDuration": 300,
                  "useSmartArrowPositioning": true,
                  "useSmartPositioning": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "description": <div />,
                    "iconClass": "fa-triangle-exclamation",
                    "mode": "danger",
                    "number": "DISCONNECTED",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/accounts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={undefined}
                  />
                </Link>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Users"
                    iconClass="fa-users"
                    number={undefined}
                  />,
                  "replace": false,
                  "to": "/accounts",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "smd-pointer",
                    "description": "Users",
                    "iconClass": "fa-users",
                    "number": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  replace={false}
                  to="/contracts"
                >
                  <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={undefined}
                  />
                </Link>,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <withRouter(Connect(NumberCard))
                    className="smd-pointer"
                    description="Contracts"
                    iconClass="fa-file-contract"
                    number={undefined}
                  />,
                  "replace": false,
                  "to": "/contracts",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "className": "smd-pointer",
                    "description": "Contracts",
                    "iconClass": "fa-file-contract",
                    "number": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <br />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <br />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-4"
              >
                <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Node ID"
                  iconClass="fa-exclamation-circle"
                  mode="pt-intent-warning"
                  number="No Identity"
                  textSize="h4"
                />
              </div>,
              <div
                className="col-sm-8"
              >
                <withRouter(Connect(NodeCard)) />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(NumberCard))
                  className="smd-pointer"
                  description="Node ID"
                  iconClass="fa-exclamation-circle"
                  mode="pt-intent-warning"
                  number="No Identity"
                  textSize="h4"
                />,
                "className": "col-sm-4",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "smd-pointer",
                  "description": "Node ID",
                  "iconClass": "fa-exclamation-circle",
                  "mode": "pt-intent-warning",
                  "number": "No Identity",
                  "textSize": "h4",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(NodeCard)) />,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <hr />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <hr />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-9 text-left"
            >
              <h3>
                Network Stats
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Network Stats
              </h3>,
              "className": "col-sm-9 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Network Stats",
              },
              "ref": null,
              "rendered": "Network Stats",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-3"
              >
                <div
                  id="networkInfo"
                >
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>
                  <br />
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={undefined}
                    />
                  </Link>
                </div>
              </div>,
              <div
                className="col-sm-3"
              >
                <withRouter(Connect(ValidatorsCard)) />
              </div>,
              <div
                className="col-sm-6"
              >
                <withRouter(Connect(TransactionList)) />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  id="networkInfo"
                >
                  <Link
                    replace={false}
                    to=""
                  >
                    <withRouter(Connect(NumberCard))
                      className="smd-pointer"
                      description="Network"
                      iconClass="fa-exclamation-circle"
                      mode="danger"
                      number="UNKNOWN"
                    />
                  </Link>
                  <br />
                  <Link
                    replace={false}
                    to="/blocks"
                  >
                    <withRouter(Connect(NumberCard))
                      description="Blocks"
                      iconClass="fa-cube"
                      number={undefined}
                    />
                  </Link>
                </div>,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Link
                      replace={false}
                      to=""
                    >
                      <withRouter(Connect(NumberCard))
                        className="smd-pointer"
                        description="Network"
                        iconClass="fa-exclamation-circle"
                        mode="danger"
                        number="UNKNOWN"
                      />
                    </Link>,
                    <br />,
                    <Link
                      replace={false}
                      to="/blocks"
                    >
                      <withRouter(Connect(NumberCard))
                        description="Blocks"
                        iconClass="fa-cube"
                        number={undefined}
                      />
                    </Link>,
                  ],
                  "id": "networkInfo",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <withRouter(Connect(NumberCard))
                        className="smd-pointer"
                        description="Network"
                        iconClass="fa-exclamation-circle"
                        mode="danger"
                        number="UNKNOWN"
                      />,
                      "replace": false,
                      "to": "",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "className": "smd-pointer",
                        "description": "Network",
                        "iconClass": "fa-exclamation-circle",
                        "mode": "danger",
                        "number": "UNKNOWN",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <withRouter(Connect(NumberCard))
                        description="Blocks"
                        iconClass="fa-cube"
                        number={undefined}
                      />,
                      "replace": false,
                      "to": "/blocks",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "description": "Blocks",
                        "iconClass": "fa-cube",
                        "number": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(ValidatorsCard)) />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <withRouter(Connect(TransactionList)) />,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <hr />
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <hr />,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "hr",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-9 text-left"
            >
              <h3>
                Historical Stats
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Historical Stats
              </h3>,
              "className": "col-sm-9 text-left",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Historical Stats",
              },
              "ref": null,
              "rendered": "Historical Stats",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-3"
              >
                <BarGraph
                  data={Array []}
                  identifier="TxCount"
                  label="Transactions per Last 15 Blocks"
                  number={undefined}
                />
              </div>,
              <div
                className="col-sm-3"
              >
                <PieChart
                  data={Array []}
                />
              </div>,
              <div
                className="col-sm-3"
              >
                <BarGraph
                  data={Array []}
                  identifier="BlockProp"
                  label="Block Interval Last 15 Blocks"
                  units="s"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <BarGraph
                  data={Array []}
                  identifier="TxCount"
                  label="Transactions per Last 15 Blocks"
                  number={undefined}
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [],
                  "identifier": "TxCount",
                  "label": "Transactions per Last 15 Blocks",
                  "number": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <PieChart
                  data={Array []}
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <BarGraph
                  data={Array []}
                  identifier="BlockProp"
                  label="Block Interval Last 15 Blocks"
                  units="s"
                />,
                "className": "col-sm-3",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "data": Array [],
                  "identifier": "BlockProp",
                  "label": "Block Interval Last 15 Blocks",
                  "units": "s",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
