// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContractQuery: index Buttons:  will trigger back button 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContractQuery
    addQueryFilter={[Function]}
    clearQueryString={[Function]}
    contractQuery={
      Object {
        "error": null,
        "queryResults": Array [
          Object {
            "address": "ddbfe1fe25dfbb91633c576aaadd8d3e377be47b",
            "amount": 5678,
            "id": 149,
            "name": "P_ ?%#@!:* 41769",
            "state": "1",
            "supplier": "Supplier1_1301_24669",
          },
          Object {
            "address": "5112a195a0bf46dbeac6ce2e9a2fbbed50dc3e44",
            "amount": 67,
            "id": 150,
            "name": "P_ ?%#@!:* 92348",
            "state": "2",
            "supplier": "Supplier1",
          },
          Object {
            "address": "eff065f2e1cf483daee729f1f45c92db46fe1092",
            "amount": 1067,
            "id": 151,
            "name": "P_ ?%#@!:* 44366",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "bd0a5c9f7965e3ff970b2b69eb686a9dd6d93ea3",
            "amount": 32,
            "id": 152,
            "name": "P_ ?%#@!:* 46441",
            "state": "2",
            "supplier": "Supplier0_1301_46441",
          },
          Object {
            "address": "2e126696dd113e8ef1a96f51d4fe21bdec5bb8d4",
            "amount": 32,
            "id": 153,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier1_1301_46441",
          },
          Object {
            "address": "421022d27ad192eb2979d0d102945d05b1b62186",
            "amount": 32,
            "id": 154,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier2_1301_46441",
          },
          Object {
            "address": "1bf900ac2d58688ebd9847ec9993533b4207165e",
            "amount": 5678,
            "id": 155,
            "name": "P_ ?%#@!:* 80772",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "ad601648712a607acf73cae058d4bc8601c1a724",
            "amount": 100,
            "id": 3,
            "name": "Project_ ? 1452_77996",
            "state": "2",
            "supplier": "Supplier1",
          },
        ],
        "queryString": "",
        "tags": Array [],
        "vars": Object {
          "amount": Object {
            "atBytes": 96,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "id": Object {
            "atBytes": 0,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "name": Object {
            "atBytes": 32,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
          "state": Object {
            "atBytes": 128,
            "contents": "BidState",
            "public": true,
            "type": "Label",
          },
          "supplier": Object {
            "atBytes": 64,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
        },
      }
    }
    history={
      Object {
        "goBack": [Function],
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {
          "name": "Bid",
        },
        "path": "/contracts/:name/query",
        "url": "/contracts/Bid/query",
      }
    }
    queryCirrus={[Function]}
    queryCirrusVars={[Function]}
    removeQueryFilter={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
              Bid
               Table
            </h3>
          </div>
          <div
            className="col-sm-6 smd-pad-16 text-right"
          >
            <Blueprint.Button
              className="pt-icon-arrow-left"
              onClick={[Function]}
              text="Back"
            />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-2"
          >
            <h4>
              Table Specification
            </h4>
          </div>
          <div
            className="col-sm-8"
          >
            <div
              className="pt-control-group smd-full-width smd-vertical-center"
            >
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Org Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Org Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                App Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="App Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Event Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Event Name"
                  type="text"
                  value=""
                />
              </label>
              <div>
                <Blueprint.Switch
                  checked={false}
                  label="Query Contract History"
                  onChange={[Function]}
                />
              </div>
            </div>
          </div>
          <div
            className="col-sm-2"
          >
            <Blueprint.Button
              className="pt-intent-primary"
              onClick={[Function]}
            >
              Go
            </Blueprint.Button>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          />
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?
            </code>
          </div>
        </div>,
        <div
          className="row"
        />,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>,
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Bid
                 Table
              </h3>,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Bid",
                  " Table",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Bid",
                " Table",
              ],
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />,
              "className": "col-sm-6 smd-pad-16 text-right",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "pt-icon-arrow-left",
                "onClick": [Function],
                "text": "Back",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>,
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>,
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h4>
                Table Specification
              </h4>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Table Specification",
              },
              "ref": null,
              "rendered": "Table Specification",
              "type": "h4",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>,
                ],
                "className": "pt-control-group smd-full-width smd-vertical-center",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Org Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Org Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Org Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "App Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "App Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "App Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Event Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Event Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Event Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "checked": false,
                      "label": "Query Contract History",
                      "onChange": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Go",
                "className": "pt-intent-primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Go",
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>,
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>,
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />,
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />,
              ],
              "className": "pt-control-group smd-full-width",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option>
                        Select field
                      </option>,
                      <option
                        value="address"
                      >
                        Address
                      </option>,
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>,
                      Array [
                        <option
                          value="address"
                        >
                          address
                        </option>,
                        <option
                          value="amount"
                        >
                          amount
                        </option>,
                        <option
                          value="state"
                        >
                          state
                        </option>,
                        <option
                          value="supplier"
                        >
                          supplier
                        </option>,
                        <option
                          value="name"
                        >
                          name
                        </option>,
                        <option
                          value="id"
                        >
                          id
                        </option>,
                      ],
                    ],
                    "className": "pt-select",
                    "onChange": [Function],
                    "value": "Select field",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Select field",
                      },
                      "ref": null,
                      "rendered": "Select field",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "Address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Shard ID",
                        "value": "chainId",
                      },
                      "ref": null,
                      "rendered": "Shard ID",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-address",
                      "nodeType": "host",
                      "props": Object {
                        "children": "address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-amount",
                      "nodeType": "host",
                      "props": Object {
                        "children": "amount",
                        "value": "amount",
                      },
                      "ref": null,
                      "rendered": "amount",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-state",
                      "nodeType": "host",
                      "props": Object {
                        "children": "state",
                        "value": "state",
                      },
                      "ref": null,
                      "rendered": "state",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-supplier",
                      "nodeType": "host",
                      "props": Object {
                        "children": "supplier",
                        "value": "supplier",
                      },
                      "ref": null,
                      "rendered": "supplier",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-name",
                      "nodeType": "host",
                      "props": Object {
                        "children": "name",
                        "value": "name",
                      },
                      "ref": null,
                      "rendered": "name",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-id",
                      "nodeType": "host",
                      "props": Object {
                        "children": "id",
                        "value": "id",
                      },
                      "ref": null,
                      "rendered": "id",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="eq"
                      >
                        =
                      </option>,
                      <option
                        value="neq"
                      >
                        !=
                      </option>,
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>,
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>,
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>,
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>,
                      <option
                        value="in"
                      >
                        IN
                      </option>,
                      <option
                        value="like"
                      >
                        LIKE
                      </option>,
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>,
                    ],
                    "onChange": [Function],
                    "value": "eq",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "=",
                        "value": "eq",
                      },
                      "ref": null,
                      "rendered": "=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "!=",
                        "value": "neq",
                      },
                      "ref": null,
                      "rendered": "!=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<",
                        "value": "lt",
                      },
                      "ref": null,
                      "rendered": "<",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<=",
                        "value": "lte",
                      },
                      "ref": null,
                      "rendered": "<=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">",
                        "value": "gt",
                      },
                      "ref": null,
                      "rendered": ">",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">=",
                        "value": "gte",
                      },
                      "ref": null,
                      "rendered": ">=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "IN",
                        "value": "in",
                      },
                      "ref": null,
                      "rendered": "IN",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "LIKE",
                        "value": "like",
                      },
                      "ref": null,
                      "rendered": "LIKE",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "ILIKE",
                        "value": "ilike",
                      },
                      "ref": null,
                      "rendered": "ILIKE",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-input",
                  "onChange": [Function],
                  "onKeyUp": [Function],
                  "placeholder": "Enter query value",
                  "style": Object {
                    "width": "80%",
                  },
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                  "disabled": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          />,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?
            </code>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?
            </code>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?",
              ],
            },
            "ref": null,
            "rendered": Array [
              "Query URL: ",
              "http://localhost/cirrus/search/Bid?",
            ],
            "type": "code",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "row",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowMultipleSelection": true,
              "children": Array [
                <Column
                  name="address"
                  renderCell={[Function]}
                />,
                <Column
                  name="amount"
                  renderCell={[Function]}
                />,
                <Column
                  name="state"
                  renderCell={[Function]}
                />,
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />,
                <Column
                  name="name"
                  renderCell={[Function]}
                />,
                <Column
                  name="id"
                  renderCell={[Function]}
                />,
              ],
              "className": "pt-striped",
              "defaultColumnWidth": 150,
              "defaultRowHeight": 20,
              "enableFocus": false,
              "fillBodyWithGhostCells": false,
              "isRowHeaderShown": true,
              "loadingOptions": Array [],
              "minColumnWidth": 50,
              "minRowHeight": 20,
              "numFrozenColumns": 0,
              "numFrozenRows": 0,
              "numRows": 8,
              "renderMode": 1,
              "renderRowHeader": [Function],
              "selectionModes": Array [
                3,
                2,
                1,
                0,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "column-address",
                "nodeType": "class",
                "props": Object {
                  "name": "address",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-amount",
                "nodeType": "class",
                "props": Object {
                  "name": "amount",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-state",
                "nodeType": "class",
                "props": Object {
                  "name": "state",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-supplier",
                "nodeType": "class",
                "props": Object {
                  "name": "supplier",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-name",
                "nodeType": "class",
                "props": Object {
                  "name": "name",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-id",
                "nodeType": "class",
                "props": Object {
                  "name": "id",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            />
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?
              </code>
            </div>
          </div>,
          <div
            className="row"
          />,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6"
              >
                <h3>
                  Bid
                   Table
                </h3>
              </div>,
              <div
                className="col-sm-6 smd-pad-16 text-right"
              >
                <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Bid
                   Table
                </h3>,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Bid",
                    " Table",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Bid",
                  " Table",
                ],
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />,
                "className": "col-sm-6 smd-pad-16 text-right",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "pt-icon-arrow-left",
                  "onClick": [Function],
                  "text": "Back",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-2"
              >
                <h4>
                  Table Specification
                </h4>
              </div>,
              <div
                className="col-sm-8"
              >
                <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="col-sm-2"
              >
                <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h4>
                  Table Specification
                </h4>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Table Specification",
                },
                "ref": null,
                "rendered": "Table Specification",
                "type": "h4",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Org Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      App Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Event Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <div>
                      <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />
                    </div>,
                  ],
                  "className": "pt-control-group smd-full-width smd-vertical-center",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Org Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Org Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Org Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Org Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "App Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="App Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "App Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "App Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Event Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Event Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Event Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Event Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "checked": false,
                        "label": "Query Contract History",
                        "onChange": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Go",
                  "className": "pt-intent-primary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Go",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="pt-select"
                  >
                    <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>
                  </div>,
                  <div
                    className="pt-select"
                  >
                    <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>
                  </div>,
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    onKeyUp={[Function]}
                    placeholder="Enter query value"
                    style={
                      Object {
                        "width": "80%",
                      }
                    }
                    type="text"
                    value=""
                  />,
                  <button
                    className="pt-button pt-intent-primary pt-icon-arrow-right"
                    disabled={true}
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-control-group smd-full-width",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option>
                          Select field
                        </option>,
                        <option
                          value="address"
                        >
                          Address
                        </option>,
                        <option
                          value="chainId"
                        >
                          Shard ID
                        </option>,
                        Array [
                          <option
                            value="address"
                          >
                            address
                          </option>,
                          <option
                            value="amount"
                          >
                            amount
                          </option>,
                          <option
                            value="state"
                          >
                            state
                          </option>,
                          <option
                            value="supplier"
                          >
                            supplier
                          </option>,
                          <option
                            value="name"
                          >
                            name
                          </option>,
                          <option
                            value="id"
                          >
                            id
                          </option>,
                        ],
                      ],
                      "className": "pt-select",
                      "onChange": [Function],
                      "value": "Select field",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Select field",
                        },
                        "ref": null,
                        "rendered": "Select field",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "Address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Shard ID",
                          "value": "chainId",
                        },
                        "ref": null,
                        "rendered": "Shard ID",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-address",
                        "nodeType": "host",
                        "props": Object {
                          "children": "address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-amount",
                        "nodeType": "host",
                        "props": Object {
                          "children": "amount",
                          "value": "amount",
                        },
                        "ref": null,
                        "rendered": "amount",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-state",
                        "nodeType": "host",
                        "props": Object {
                          "children": "state",
                          "value": "state",
                        },
                        "ref": null,
                        "rendered": "state",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-supplier",
                        "nodeType": "host",
                        "props": Object {
                          "children": "supplier",
                          "value": "supplier",
                        },
                        "ref": null,
                        "rendered": "supplier",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-name",
                        "nodeType": "host",
                        "props": Object {
                          "children": "name",
                          "value": "name",
                        },
                        "ref": null,
                        "rendered": "name",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-id",
                        "nodeType": "host",
                        "props": Object {
                          "children": "id",
                          "value": "id",
                        },
                        "ref": null,
                        "rendered": "id",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="eq"
                        >
                          =
                        </option>,
                        <option
                          value="neq"
                        >
                          !=
                        </option>,
                        <option
                          value="lt"
                        >
                          &lt;
                        </option>,
                        <option
                          value="lte"
                        >
                          &lt;=
                        </option>,
                        <option
                          value="gt"
                        >
                          &gt;
                        </option>,
                        <option
                          value="gte"
                        >
                          &gt;=
                        </option>,
                        <option
                          value="in"
                        >
                          IN
                        </option>,
                        <option
                          value="like"
                        >
                          LIKE
                        </option>,
                        <option
                          value="ilike"
                        >
                          ILIKE
                        </option>,
                      ],
                      "onChange": [Function],
                      "value": "eq",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "=",
                          "value": "eq",
                        },
                        "ref": null,
                        "rendered": "=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "!=",
                          "value": "neq",
                        },
                        "ref": null,
                        "rendered": "!=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<",
                          "value": "lt",
                        },
                        "ref": null,
                        "rendered": "<",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<=",
                          "value": "lte",
                        },
                        "ref": null,
                        "rendered": "<=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">",
                          "value": "gt",
                        },
                        "ref": null,
                        "rendered": ">",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">=",
                          "value": "gte",
                        },
                        "ref": null,
                        "rendered": ">=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "IN",
                          "value": "in",
                        },
                        "ref": null,
                        "rendered": "IN",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "LIKE",
                          "value": "like",
                        },
                        "ref": null,
                        "rendered": "LIKE",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "ILIKE",
                          "value": "ilike",
                        },
                        "ref": null,
                        "rendered": "ILIKE",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-input",
                    "onChange": [Function],
                    "onKeyUp": [Function],
                    "placeholder": "Enter query value",
                    "style": Object {
                      "width": "80%",
                    },
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            />,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [],
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Array [],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?
              </code>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?
              </code>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Query URL: ",
                  "http://localhost/cirrus/search/Bid?",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?",
              ],
              "type": "code",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "row",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowMultipleSelection": true,
                "children": Array [
                  <Column
                    name="address"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="amount"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="state"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="supplier"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="name"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="id"
                    renderCell={[Function]}
                  />,
                ],
                "className": "pt-striped",
                "defaultColumnWidth": 150,
                "defaultRowHeight": 20,
                "enableFocus": false,
                "fillBodyWithGhostCells": false,
                "isRowHeaderShown": true,
                "loadingOptions": Array [],
                "minColumnWidth": 50,
                "minRowHeight": 20,
                "numFrozenColumns": 0,
                "numFrozenRows": 0,
                "numRows": 8,
                "renderMode": 1,
                "renderRowHeader": [Function],
                "selectionModes": Array [
                  3,
                  2,
                  1,
                  0,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "column-address",
                  "nodeType": "class",
                  "props": Object {
                    "name": "address",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-amount",
                  "nodeType": "class",
                  "props": Object {
                    "name": "amount",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-state",
                  "nodeType": "class",
                  "props": Object {
                    "name": "state",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-supplier",
                  "nodeType": "class",
                  "props": Object {
                    "name": "supplier",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-name",
                  "nodeType": "class",
                  "props": Object {
                    "name": "name",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-id",
                  "nodeType": "class",
                  "props": Object {
                    "name": "id",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`ContractQuery: index Table:  render with JSON format column 1`] = `
"<Column name=\\"address\\" renderCell={[Function: renderCell]} />


<Column name=\\"amount\\" renderCell={[Function: renderCell]} />


<Column name=\\"state\\" renderCell={[Function: renderCell]} />


<Column name=\\"supplier\\" renderCell={[Function: renderCell]} />


<Column name=\\"name\\" renderCell={[Function: renderCell]} />


<Column name=\\"id\\" renderCell={[Function: renderCell]} />"
`;

exports[`ContractQuery: index Table:  render with TruncatedFormat column 1`] = `
<Cell
  tooltip="eff065f2e1cf483daee729f1f45c92db46fe1092"
  truncated={true}
  wrapText={false}
>
  <TruncatedFormat
    detectTruncation={false}
    measureByApproxOptions={
      Object {
        "approximateCharWidth": 8,
        "approximateLineHeight": 18,
        "cellHorizontalPadding": 20,
        "numBufferLines": 0,
      }
    }
    preformatted={false}
    showPopover={2}
    truncateLength={2000}
    truncationSuffix="..."
  >
    eff065f2e1cf483daee729f1f45c92db46fe1092
  </TruncatedFormat>
</Cell>
`;

exports[`ContractQuery: index Table:  render with TruncatedFormat column 2`] = `
<Cell
  tooltip={67}
  truncated={true}
  wrapText={false}
>
  <TruncatedFormat
    detectTruncation={false}
    measureByApproxOptions={
      Object {
        "approximateCharWidth": 8,
        "approximateLineHeight": 18,
        "cellHorizontalPadding": 20,
        "numBufferLines": 0,
      }
    }
    preformatted={false}
    showPopover={2}
    truncateLength={2000}
    truncationSuffix="..."
  >
    67
  </TruncatedFormat>
</Cell>
`;

exports[`ContractQuery: index Table:  render with TruncatedFormat column 3`] = `
"<Column name=\\"address\\" renderCell={[Function: renderCell]} />


<Column name=\\"amount\\" renderCell={[Function: renderCell]} />


<Column name=\\"state\\" renderCell={[Function: renderCell]} />


<Column name=\\"supplier\\" renderCell={[Function: renderCell]} />


<Column name=\\"name\\" renderCell={[Function: renderCell]} />


<Column name=\\"id\\" renderCell={[Function: renderCell]} />"
`;

exports[`ContractQuery: index componentWillReceiveProps:  invoke with falsy statement 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContractQuery
    addQueryFilter={[Function]}
    clearQueryString={[Function]}
    contractQuery={
      Object {
        "error": null,
        "queryResults": Array [
          Object {
            "address": "ddbfe1fe25dfbb91633c576aaadd8d3e377be47b",
            "amount": 5678,
            "id": 149,
            "name": "P_ ?%#@!:* 41769",
            "state": "1",
            "supplier": "Supplier1_1301_24669",
          },
          Object {
            "address": "5112a195a0bf46dbeac6ce2e9a2fbbed50dc3e44",
            "amount": 67,
            "id": 150,
            "name": "P_ ?%#@!:* 92348",
            "state": "2",
            "supplier": "Supplier1",
          },
          Object {
            "address": "eff065f2e1cf483daee729f1f45c92db46fe1092",
            "amount": 1067,
            "id": 151,
            "name": "P_ ?%#@!:* 44366",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "bd0a5c9f7965e3ff970b2b69eb686a9dd6d93ea3",
            "amount": 32,
            "id": 152,
            "name": "P_ ?%#@!:* 46441",
            "state": "2",
            "supplier": "Supplier0_1301_46441",
          },
          Object {
            "address": "2e126696dd113e8ef1a96f51d4fe21bdec5bb8d4",
            "amount": 32,
            "id": 153,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier1_1301_46441",
          },
          Object {
            "address": "421022d27ad192eb2979d0d102945d05b1b62186",
            "amount": 32,
            "id": 154,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier2_1301_46441",
          },
          Object {
            "address": "1bf900ac2d58688ebd9847ec9993533b4207165e",
            "amount": 5678,
            "id": 155,
            "name": "P_ ?%#@!:* 80772",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "ad601648712a607acf73cae058d4bc8601c1a724",
            "amount": 100,
            "id": 3,
            "name": "Project_ ? 1452_77996",
            "state": "2",
            "supplier": "Supplier1",
          },
        ],
        "queryString": "state=eq.1&amount=eq.5678",
        "tags": Array [
          Object {
            "display": "state eq 1",
            "field": "state",
            "operator": "eq",
            "value": "1",
          },
          Object {
            "display": "amount eq 5678",
            "field": "amount",
            "operator": "eq",
            "value": "5678",
          },
        ],
        "vars": Object {
          "amount": Object {
            "atBytes": 96,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "id": Object {
            "atBytes": 0,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "name": Object {
            "atBytes": 32,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
          "state": Object {
            "atBytes": 128,
            "contents": "BidState",
            "public": true,
            "type": "Label",
          },
          "supplier": Object {
            "atBytes": 64,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
        },
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {
          "name": "Bid",
        },
        "path": "/contracts/:name/query",
        "url": "/contracts/Bid/query",
      }
    }
    queryCirrus={[Function]}
    queryCirrusVars={[Function]}
    removeQueryFilter={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
              Bid
               Table
            </h3>
          </div>
          <div
            className="col-sm-6 smd-pad-16 text-right"
          >
            <Blueprint.Button
              className="pt-icon-arrow-left"
              onClick={[Function]}
              text="Back"
            />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-2"
          >
            <h4>
              Table Specification
            </h4>
          </div>
          <div
            className="col-sm-8"
          >
            <div
              className="pt-control-group smd-full-width smd-vertical-center"
            >
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Org Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Org Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                App Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="App Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Event Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Event Name"
                  type="text"
                  value=""
                />
              </label>
              <div>
                <Blueprint.Switch
                  checked={false}
                  label="Query Contract History"
                  onChange={[Function]}
                />
              </div>
            </div>
          </div>
          <div
            className="col-sm-2"
          >
            <Blueprint.Button
              className="pt-intent-primary"
              onClick={[Function]}
            >
              Go
            </Blueprint.Button>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              state eq 1
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              amount eq 5678
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
            </code>
          </div>
        </div>,
        <div
          className="row"
        />,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>,
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Bid
                 Table
              </h3>,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Bid",
                  " Table",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Bid",
                " Table",
              ],
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />,
              "className": "col-sm-6 smd-pad-16 text-right",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "pt-icon-arrow-left",
                "onClick": [Function],
                "text": "Back",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>,
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>,
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h4>
                Table Specification
              </h4>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Table Specification",
              },
              "ref": null,
              "rendered": "Table Specification",
              "type": "h4",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>,
                ],
                "className": "pt-control-group smd-full-width smd-vertical-center",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Org Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Org Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Org Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "App Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "App Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "App Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Event Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Event Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Event Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "checked": false,
                      "label": "Query Contract History",
                      "onChange": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Go",
                "className": "pt-intent-primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Go",
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>,
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>,
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />,
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />,
              ],
              "className": "pt-control-group smd-full-width",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option>
                        Select field
                      </option>,
                      <option
                        value="address"
                      >
                        Address
                      </option>,
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>,
                      Array [
                        <option
                          value="address"
                        >
                          address
                        </option>,
                        <option
                          value="amount"
                        >
                          amount
                        </option>,
                        <option
                          value="state"
                        >
                          state
                        </option>,
                        <option
                          value="supplier"
                        >
                          supplier
                        </option>,
                        <option
                          value="name"
                        >
                          name
                        </option>,
                        <option
                          value="id"
                        >
                          id
                        </option>,
                      ],
                    ],
                    "className": "pt-select",
                    "onChange": [Function],
                    "value": "Select field",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Select field",
                      },
                      "ref": null,
                      "rendered": "Select field",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "Address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Shard ID",
                        "value": "chainId",
                      },
                      "ref": null,
                      "rendered": "Shard ID",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-address",
                      "nodeType": "host",
                      "props": Object {
                        "children": "address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-amount",
                      "nodeType": "host",
                      "props": Object {
                        "children": "amount",
                        "value": "amount",
                      },
                      "ref": null,
                      "rendered": "amount",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-state",
                      "nodeType": "host",
                      "props": Object {
                        "children": "state",
                        "value": "state",
                      },
                      "ref": null,
                      "rendered": "state",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-supplier",
                      "nodeType": "host",
                      "props": Object {
                        "children": "supplier",
                        "value": "supplier",
                      },
                      "ref": null,
                      "rendered": "supplier",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-name",
                      "nodeType": "host",
                      "props": Object {
                        "children": "name",
                        "value": "name",
                      },
                      "ref": null,
                      "rendered": "name",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-id",
                      "nodeType": "host",
                      "props": Object {
                        "children": "id",
                        "value": "id",
                      },
                      "ref": null,
                      "rendered": "id",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="eq"
                      >
                        =
                      </option>,
                      <option
                        value="neq"
                      >
                        !=
                      </option>,
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>,
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>,
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>,
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>,
                      <option
                        value="in"
                      >
                        IN
                      </option>,
                      <option
                        value="like"
                      >
                        LIKE
                      </option>,
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>,
                    ],
                    "onChange": [Function],
                    "value": "eq",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "=",
                        "value": "eq",
                      },
                      "ref": null,
                      "rendered": "=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "!=",
                        "value": "neq",
                      },
                      "ref": null,
                      "rendered": "!=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<",
                        "value": "lt",
                      },
                      "ref": null,
                      "rendered": "<",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<=",
                        "value": "lte",
                      },
                      "ref": null,
                      "rendered": "<=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">",
                        "value": "gt",
                      },
                      "ref": null,
                      "rendered": ">",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">=",
                        "value": "gte",
                      },
                      "ref": null,
                      "rendered": ">=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "IN",
                        "value": "in",
                      },
                      "ref": null,
                      "rendered": "IN",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "LIKE",
                        "value": "like",
                      },
                      "ref": null,
                      "rendered": "LIKE",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "ILIKE",
                        "value": "ilike",
                      },
                      "ref": null,
                      "rendered": "ILIKE",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-input",
                  "onChange": [Function],
                  "onKeyUp": [Function],
                  "placeholder": "Enter query value",
                  "style": Object {
                    "width": "80%",
                  },
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                  "disabled": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              state eq 1
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              amount eq 5678
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
            ],
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "tag-state-0",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "state eq 1",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "state eq 1",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": "tag-amount-1",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "amount eq 5678",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "amount eq 5678",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
            </code>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
            </code>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
              ],
            },
            "ref": null,
            "rendered": Array [
              "Query URL: ",
              "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
            ],
            "type": "code",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "row",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowMultipleSelection": true,
              "children": Array [
                <Column
                  name="address"
                  renderCell={[Function]}
                />,
                <Column
                  name="amount"
                  renderCell={[Function]}
                />,
                <Column
                  name="state"
                  renderCell={[Function]}
                />,
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />,
                <Column
                  name="name"
                  renderCell={[Function]}
                />,
                <Column
                  name="id"
                  renderCell={[Function]}
                />,
              ],
              "className": "pt-striped",
              "defaultColumnWidth": 150,
              "defaultRowHeight": 20,
              "enableFocus": false,
              "fillBodyWithGhostCells": false,
              "isRowHeaderShown": true,
              "loadingOptions": Array [],
              "minColumnWidth": 50,
              "minRowHeight": 20,
              "numFrozenColumns": 0,
              "numFrozenRows": 0,
              "numRows": 8,
              "renderMode": 1,
              "renderRowHeader": [Function],
              "selectionModes": Array [
                3,
                2,
                1,
                0,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "column-address",
                "nodeType": "class",
                "props": Object {
                  "name": "address",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-amount",
                "nodeType": "class",
                "props": Object {
                  "name": "amount",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-state",
                "nodeType": "class",
                "props": Object {
                  "name": "state",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-supplier",
                "nodeType": "class",
                "props": Object {
                  "name": "supplier",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-name",
                "nodeType": "class",
                "props": Object {
                  "name": "name",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-id",
                "nodeType": "class",
                "props": Object {
                  "name": "id",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
              </code>
            </div>
          </div>,
          <div
            className="row"
          />,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6"
              >
                <h3>
                  Bid
                   Table
                </h3>
              </div>,
              <div
                className="col-sm-6 smd-pad-16 text-right"
              >
                <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Bid
                   Table
                </h3>,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Bid",
                    " Table",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Bid",
                  " Table",
                ],
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />,
                "className": "col-sm-6 smd-pad-16 text-right",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "pt-icon-arrow-left",
                  "onClick": [Function],
                  "text": "Back",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-2"
              >
                <h4>
                  Table Specification
                </h4>
              </div>,
              <div
                className="col-sm-8"
              >
                <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="col-sm-2"
              >
                <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h4>
                  Table Specification
                </h4>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Table Specification",
                },
                "ref": null,
                "rendered": "Table Specification",
                "type": "h4",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Org Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      App Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Event Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <div>
                      <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />
                    </div>,
                  ],
                  "className": "pt-control-group smd-full-width smd-vertical-center",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Org Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Org Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Org Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Org Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "App Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="App Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "App Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "App Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Event Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Event Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Event Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Event Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "checked": false,
                        "label": "Query Contract History",
                        "onChange": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Go",
                  "className": "pt-intent-primary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Go",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="pt-select"
                  >
                    <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>
                  </div>,
                  <div
                    className="pt-select"
                  >
                    <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>
                  </div>,
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    onKeyUp={[Function]}
                    placeholder="Enter query value"
                    style={
                      Object {
                        "width": "80%",
                      }
                    }
                    type="text"
                    value=""
                  />,
                  <button
                    className="pt-button pt-intent-primary pt-icon-arrow-right"
                    disabled={true}
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-control-group smd-full-width",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option>
                          Select field
                        </option>,
                        <option
                          value="address"
                        >
                          Address
                        </option>,
                        <option
                          value="chainId"
                        >
                          Shard ID
                        </option>,
                        Array [
                          <option
                            value="address"
                          >
                            address
                          </option>,
                          <option
                            value="amount"
                          >
                            amount
                          </option>,
                          <option
                            value="state"
                          >
                            state
                          </option>,
                          <option
                            value="supplier"
                          >
                            supplier
                          </option>,
                          <option
                            value="name"
                          >
                            name
                          </option>,
                          <option
                            value="id"
                          >
                            id
                          </option>,
                        ],
                      ],
                      "className": "pt-select",
                      "onChange": [Function],
                      "value": "Select field",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Select field",
                        },
                        "ref": null,
                        "rendered": "Select field",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "Address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Shard ID",
                          "value": "chainId",
                        },
                        "ref": null,
                        "rendered": "Shard ID",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-address",
                        "nodeType": "host",
                        "props": Object {
                          "children": "address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-amount",
                        "nodeType": "host",
                        "props": Object {
                          "children": "amount",
                          "value": "amount",
                        },
                        "ref": null,
                        "rendered": "amount",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-state",
                        "nodeType": "host",
                        "props": Object {
                          "children": "state",
                          "value": "state",
                        },
                        "ref": null,
                        "rendered": "state",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-supplier",
                        "nodeType": "host",
                        "props": Object {
                          "children": "supplier",
                          "value": "supplier",
                        },
                        "ref": null,
                        "rendered": "supplier",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-name",
                        "nodeType": "host",
                        "props": Object {
                          "children": "name",
                          "value": "name",
                        },
                        "ref": null,
                        "rendered": "name",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-id",
                        "nodeType": "host",
                        "props": Object {
                          "children": "id",
                          "value": "id",
                        },
                        "ref": null,
                        "rendered": "id",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="eq"
                        >
                          =
                        </option>,
                        <option
                          value="neq"
                        >
                          !=
                        </option>,
                        <option
                          value="lt"
                        >
                          &lt;
                        </option>,
                        <option
                          value="lte"
                        >
                          &lt;=
                        </option>,
                        <option
                          value="gt"
                        >
                          &gt;
                        </option>,
                        <option
                          value="gte"
                        >
                          &gt;=
                        </option>,
                        <option
                          value="in"
                        >
                          IN
                        </option>,
                        <option
                          value="like"
                        >
                          LIKE
                        </option>,
                        <option
                          value="ilike"
                        >
                          ILIKE
                        </option>,
                      ],
                      "onChange": [Function],
                      "value": "eq",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "=",
                          "value": "eq",
                        },
                        "ref": null,
                        "rendered": "=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "!=",
                          "value": "neq",
                        },
                        "ref": null,
                        "rendered": "!=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<",
                          "value": "lt",
                        },
                        "ref": null,
                        "rendered": "<",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<=",
                          "value": "lte",
                        },
                        "ref": null,
                        "rendered": "<=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">",
                          "value": "gt",
                        },
                        "ref": null,
                        "rendered": ">",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">=",
                          "value": "gte",
                        },
                        "ref": null,
                        "rendered": ">=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "IN",
                          "value": "in",
                        },
                        "ref": null,
                        "rendered": "IN",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "LIKE",
                          "value": "like",
                        },
                        "ref": null,
                        "rendered": "LIKE",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "ILIKE",
                          "value": "ilike",
                        },
                        "ref": null,
                        "rendered": "ILIKE",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-input",
                    "onChange": [Function],
                    "onKeyUp": [Function],
                    "placeholder": "Enter query value",
                    "style": Object {
                      "width": "80%",
                    },
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  state eq 1
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  amount eq 5678
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
              ],
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "tag-state-0",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "state eq 1",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "state eq 1",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
              Object {
                "instance": null,
                "key": "tag-amount-1",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "amount eq 5678",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "amount eq 5678",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
              </code>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
              </code>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Query URL: ",
                  "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
              ],
              "type": "code",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "row",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowMultipleSelection": true,
                "children": Array [
                  <Column
                    name="address"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="amount"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="state"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="supplier"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="name"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="id"
                    renderCell={[Function]}
                  />,
                ],
                "className": "pt-striped",
                "defaultColumnWidth": 150,
                "defaultRowHeight": 20,
                "enableFocus": false,
                "fillBodyWithGhostCells": false,
                "isRowHeaderShown": true,
                "loadingOptions": Array [],
                "minColumnWidth": 50,
                "minRowHeight": 20,
                "numFrozenColumns": 0,
                "numFrozenRows": 0,
                "numRows": 8,
                "renderMode": 1,
                "renderRowHeader": [Function],
                "selectionModes": Array [
                  3,
                  2,
                  1,
                  0,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "column-address",
                  "nodeType": "class",
                  "props": Object {
                    "name": "address",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-amount",
                  "nodeType": "class",
                  "props": Object {
                    "name": "amount",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-state",
                  "nodeType": "class",
                  "props": Object {
                    "name": "state",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-supplier",
                  "nodeType": "class",
                  "props": Object {
                    "name": "supplier",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-name",
                  "nodeType": "class",
                  "props": Object {
                    "name": "name",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-id",
                  "nodeType": "class",
                  "props": Object {
                    "name": "id",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`ContractQuery: index componentWillReceiveProps:  invoke with truthy statement 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContractQuery
    addQueryFilter={[Function]}
    clearQueryString={[Function]}
    contractQuery={
      Object {
        "error": null,
        "queryResults": Array [
          Object {
            "address": "ddbfe1fe25dfbb91633c576aaadd8d3e377be47b",
            "amount": 5678,
            "id": 149,
            "name": "P_ ?%#@!:* 41769",
            "state": "1",
            "supplier": "Supplier1_1301_24669",
          },
          Object {
            "address": "5112a195a0bf46dbeac6ce2e9a2fbbed50dc3e44",
            "amount": 67,
            "id": 150,
            "name": "P_ ?%#@!:* 92348",
            "state": "2",
            "supplier": "Supplier1",
          },
          Object {
            "address": "eff065f2e1cf483daee729f1f45c92db46fe1092",
            "amount": 1067,
            "id": 151,
            "name": "P_ ?%#@!:* 44366",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "bd0a5c9f7965e3ff970b2b69eb686a9dd6d93ea3",
            "amount": 32,
            "id": 152,
            "name": "P_ ?%#@!:* 46441",
            "state": "2",
            "supplier": "Supplier0_1301_46441",
          },
          Object {
            "address": "2e126696dd113e8ef1a96f51d4fe21bdec5bb8d4",
            "amount": 32,
            "id": 153,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier1_1301_46441",
          },
          Object {
            "address": "421022d27ad192eb2979d0d102945d05b1b62186",
            "amount": 32,
            "id": 154,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier2_1301_46441",
          },
          Object {
            "address": "1bf900ac2d58688ebd9847ec9993533b4207165e",
            "amount": 5678,
            "id": 155,
            "name": "P_ ?%#@!:* 80772",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "ad601648712a607acf73cae058d4bc8601c1a724",
            "amount": 100,
            "id": 3,
            "name": "Project_ ? 1452_77996",
            "state": "2",
            "supplier": "Supplier1",
          },
        ],
        "queryString": "state=eq.1&amount=eq.5678",
        "selectedChain": "ff7ef45acb7a775018bc765b6fdeea432aaddfcd846cf6dd9442724266b1eac9",
        "tags": Array [
          Object {
            "display": "state eq 1",
            "field": "state",
            "operator": "eq",
            "value": "1",
          },
          Object {
            "display": "amount eq 5678",
            "field": "amount",
            "operator": "eq",
            "value": "5678",
          },
        ],
        "vars": Object {
          "amount": Object {
            "atBytes": 96,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "id": Object {
            "atBytes": 0,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "name": Object {
            "atBytes": 32,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
          "state": Object {
            "atBytes": 128,
            "contents": "BidState",
            "public": true,
            "type": "Label",
          },
          "supplier": Object {
            "atBytes": 64,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
        },
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {
          "name": "Bid",
        },
        "path": "/contracts/:name/query",
        "url": "/contracts/Bid/query",
      }
    }
    queryCirrus={[Function]}
    queryCirrusVars={[Function]}
    removeQueryFilter={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
              Bid
               Table
            </h3>
          </div>
          <div
            className="col-sm-6 smd-pad-16 text-right"
          >
            <Blueprint.Button
              className="pt-icon-arrow-left"
              onClick={[Function]}
              text="Back"
            />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-2"
          >
            <h4>
              Table Specification
            </h4>
          </div>
          <div
            className="col-sm-8"
          >
            <div
              className="pt-control-group smd-full-width smd-vertical-center"
            >
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Org Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Org Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                App Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="App Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Event Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Event Name"
                  type="text"
                  value=""
                />
              </label>
              <div>
                <Blueprint.Switch
                  checked={false}
                  label="Query Contract History"
                  onChange={[Function]}
                />
              </div>
            </div>
          </div>
          <div
            className="col-sm-2"
          >
            <Blueprint.Button
              className="pt-intent-primary"
              onClick={[Function]}
            >
              Go
            </Blueprint.Button>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              state eq 1
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              amount eq 5678
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
            </code>
          </div>
        </div>,
        <div
          className="row"
        />,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>,
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Bid
                 Table
              </h3>,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Bid",
                  " Table",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Bid",
                " Table",
              ],
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />,
              "className": "col-sm-6 smd-pad-16 text-right",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "pt-icon-arrow-left",
                "onClick": [Function],
                "text": "Back",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>,
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>,
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h4>
                Table Specification
              </h4>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Table Specification",
              },
              "ref": null,
              "rendered": "Table Specification",
              "type": "h4",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>,
                ],
                "className": "pt-control-group smd-full-width smd-vertical-center",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Org Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Org Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Org Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "App Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "App Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "App Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Event Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Event Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Event Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "checked": false,
                      "label": "Query Contract History",
                      "onChange": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Go",
                "className": "pt-intent-primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Go",
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>,
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>,
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />,
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />,
              ],
              "className": "pt-control-group smd-full-width",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option>
                        Select field
                      </option>,
                      <option
                        value="address"
                      >
                        Address
                      </option>,
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>,
                      Array [
                        <option
                          value="address"
                        >
                          address
                        </option>,
                        <option
                          value="amount"
                        >
                          amount
                        </option>,
                        <option
                          value="state"
                        >
                          state
                        </option>,
                        <option
                          value="supplier"
                        >
                          supplier
                        </option>,
                        <option
                          value="name"
                        >
                          name
                        </option>,
                        <option
                          value="id"
                        >
                          id
                        </option>,
                      ],
                    ],
                    "className": "pt-select",
                    "onChange": [Function],
                    "value": "Select field",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Select field",
                      },
                      "ref": null,
                      "rendered": "Select field",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "Address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Shard ID",
                        "value": "chainId",
                      },
                      "ref": null,
                      "rendered": "Shard ID",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-address",
                      "nodeType": "host",
                      "props": Object {
                        "children": "address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-amount",
                      "nodeType": "host",
                      "props": Object {
                        "children": "amount",
                        "value": "amount",
                      },
                      "ref": null,
                      "rendered": "amount",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-state",
                      "nodeType": "host",
                      "props": Object {
                        "children": "state",
                        "value": "state",
                      },
                      "ref": null,
                      "rendered": "state",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-supplier",
                      "nodeType": "host",
                      "props": Object {
                        "children": "supplier",
                        "value": "supplier",
                      },
                      "ref": null,
                      "rendered": "supplier",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-name",
                      "nodeType": "host",
                      "props": Object {
                        "children": "name",
                        "value": "name",
                      },
                      "ref": null,
                      "rendered": "name",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-id",
                      "nodeType": "host",
                      "props": Object {
                        "children": "id",
                        "value": "id",
                      },
                      "ref": null,
                      "rendered": "id",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="eq"
                      >
                        =
                      </option>,
                      <option
                        value="neq"
                      >
                        !=
                      </option>,
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>,
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>,
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>,
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>,
                      <option
                        value="in"
                      >
                        IN
                      </option>,
                      <option
                        value="like"
                      >
                        LIKE
                      </option>,
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>,
                    ],
                    "onChange": [Function],
                    "value": "eq",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "=",
                        "value": "eq",
                      },
                      "ref": null,
                      "rendered": "=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "!=",
                        "value": "neq",
                      },
                      "ref": null,
                      "rendered": "!=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<",
                        "value": "lt",
                      },
                      "ref": null,
                      "rendered": "<",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<=",
                        "value": "lte",
                      },
                      "ref": null,
                      "rendered": "<=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">",
                        "value": "gt",
                      },
                      "ref": null,
                      "rendered": ">",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">=",
                        "value": "gte",
                      },
                      "ref": null,
                      "rendered": ">=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "IN",
                        "value": "in",
                      },
                      "ref": null,
                      "rendered": "IN",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "LIKE",
                        "value": "like",
                      },
                      "ref": null,
                      "rendered": "LIKE",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "ILIKE",
                        "value": "ilike",
                      },
                      "ref": null,
                      "rendered": "ILIKE",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-input",
                  "onChange": [Function],
                  "onKeyUp": [Function],
                  "placeholder": "Enter query value",
                  "style": Object {
                    "width": "80%",
                  },
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                  "disabled": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              state eq 1
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              amount eq 5678
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
            ],
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "tag-state-0",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "state eq 1",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "state eq 1",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": "tag-amount-1",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "amount eq 5678",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "amount eq 5678",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
            </code>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
            </code>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
              ],
            },
            "ref": null,
            "rendered": Array [
              "Query URL: ",
              "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
            ],
            "type": "code",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "row",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowMultipleSelection": true,
              "children": Array [
                <Column
                  name="address"
                  renderCell={[Function]}
                />,
                <Column
                  name="amount"
                  renderCell={[Function]}
                />,
                <Column
                  name="state"
                  renderCell={[Function]}
                />,
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />,
                <Column
                  name="name"
                  renderCell={[Function]}
                />,
                <Column
                  name="id"
                  renderCell={[Function]}
                />,
              ],
              "className": "pt-striped",
              "defaultColumnWidth": 150,
              "defaultRowHeight": 20,
              "enableFocus": false,
              "fillBodyWithGhostCells": false,
              "isRowHeaderShown": true,
              "loadingOptions": Array [],
              "minColumnWidth": 50,
              "minRowHeight": 20,
              "numFrozenColumns": 0,
              "numFrozenRows": 0,
              "numRows": 8,
              "renderMode": 1,
              "renderRowHeader": [Function],
              "selectionModes": Array [
                3,
                2,
                1,
                0,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "column-address",
                "nodeType": "class",
                "props": Object {
                  "name": "address",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-amount",
                "nodeType": "class",
                "props": Object {
                  "name": "amount",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-state",
                "nodeType": "class",
                "props": Object {
                  "name": "state",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-supplier",
                "nodeType": "class",
                "props": Object {
                  "name": "supplier",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-name",
                "nodeType": "class",
                "props": Object {
                  "name": "name",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-id",
                "nodeType": "class",
                "props": Object {
                  "name": "id",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
              </code>
            </div>
          </div>,
          <div
            className="row"
          />,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6"
              >
                <h3>
                  Bid
                   Table
                </h3>
              </div>,
              <div
                className="col-sm-6 smd-pad-16 text-right"
              >
                <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Bid
                   Table
                </h3>,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Bid",
                    " Table",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Bid",
                  " Table",
                ],
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />,
                "className": "col-sm-6 smd-pad-16 text-right",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "pt-icon-arrow-left",
                  "onClick": [Function],
                  "text": "Back",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-2"
              >
                <h4>
                  Table Specification
                </h4>
              </div>,
              <div
                className="col-sm-8"
              >
                <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="col-sm-2"
              >
                <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h4>
                  Table Specification
                </h4>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Table Specification",
                },
                "ref": null,
                "rendered": "Table Specification",
                "type": "h4",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Org Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      App Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Event Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <div>
                      <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />
                    </div>,
                  ],
                  "className": "pt-control-group smd-full-width smd-vertical-center",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Org Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Org Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Org Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Org Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "App Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="App Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "App Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "App Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Event Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Event Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Event Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Event Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "checked": false,
                        "label": "Query Contract History",
                        "onChange": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Go",
                  "className": "pt-intent-primary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Go",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="pt-select"
                  >
                    <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>
                  </div>,
                  <div
                    className="pt-select"
                  >
                    <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>
                  </div>,
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    onKeyUp={[Function]}
                    placeholder="Enter query value"
                    style={
                      Object {
                        "width": "80%",
                      }
                    }
                    type="text"
                    value=""
                  />,
                  <button
                    className="pt-button pt-intent-primary pt-icon-arrow-right"
                    disabled={true}
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-control-group smd-full-width",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option>
                          Select field
                        </option>,
                        <option
                          value="address"
                        >
                          Address
                        </option>,
                        <option
                          value="chainId"
                        >
                          Shard ID
                        </option>,
                        Array [
                          <option
                            value="address"
                          >
                            address
                          </option>,
                          <option
                            value="amount"
                          >
                            amount
                          </option>,
                          <option
                            value="state"
                          >
                            state
                          </option>,
                          <option
                            value="supplier"
                          >
                            supplier
                          </option>,
                          <option
                            value="name"
                          >
                            name
                          </option>,
                          <option
                            value="id"
                          >
                            id
                          </option>,
                        ],
                      ],
                      "className": "pt-select",
                      "onChange": [Function],
                      "value": "Select field",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Select field",
                        },
                        "ref": null,
                        "rendered": "Select field",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "Address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Shard ID",
                          "value": "chainId",
                        },
                        "ref": null,
                        "rendered": "Shard ID",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-address",
                        "nodeType": "host",
                        "props": Object {
                          "children": "address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-amount",
                        "nodeType": "host",
                        "props": Object {
                          "children": "amount",
                          "value": "amount",
                        },
                        "ref": null,
                        "rendered": "amount",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-state",
                        "nodeType": "host",
                        "props": Object {
                          "children": "state",
                          "value": "state",
                        },
                        "ref": null,
                        "rendered": "state",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-supplier",
                        "nodeType": "host",
                        "props": Object {
                          "children": "supplier",
                          "value": "supplier",
                        },
                        "ref": null,
                        "rendered": "supplier",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-name",
                        "nodeType": "host",
                        "props": Object {
                          "children": "name",
                          "value": "name",
                        },
                        "ref": null,
                        "rendered": "name",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-id",
                        "nodeType": "host",
                        "props": Object {
                          "children": "id",
                          "value": "id",
                        },
                        "ref": null,
                        "rendered": "id",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="eq"
                        >
                          =
                        </option>,
                        <option
                          value="neq"
                        >
                          !=
                        </option>,
                        <option
                          value="lt"
                        >
                          &lt;
                        </option>,
                        <option
                          value="lte"
                        >
                          &lt;=
                        </option>,
                        <option
                          value="gt"
                        >
                          &gt;
                        </option>,
                        <option
                          value="gte"
                        >
                          &gt;=
                        </option>,
                        <option
                          value="in"
                        >
                          IN
                        </option>,
                        <option
                          value="like"
                        >
                          LIKE
                        </option>,
                        <option
                          value="ilike"
                        >
                          ILIKE
                        </option>,
                      ],
                      "onChange": [Function],
                      "value": "eq",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "=",
                          "value": "eq",
                        },
                        "ref": null,
                        "rendered": "=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "!=",
                          "value": "neq",
                        },
                        "ref": null,
                        "rendered": "!=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<",
                          "value": "lt",
                        },
                        "ref": null,
                        "rendered": "<",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<=",
                          "value": "lte",
                        },
                        "ref": null,
                        "rendered": "<=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">",
                          "value": "gt",
                        },
                        "ref": null,
                        "rendered": ">",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">=",
                          "value": "gte",
                        },
                        "ref": null,
                        "rendered": ">=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "IN",
                          "value": "in",
                        },
                        "ref": null,
                        "rendered": "IN",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "LIKE",
                          "value": "like",
                        },
                        "ref": null,
                        "rendered": "LIKE",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "ILIKE",
                          "value": "ilike",
                        },
                        "ref": null,
                        "rendered": "ILIKE",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-input",
                    "onChange": [Function],
                    "onKeyUp": [Function],
                    "placeholder": "Enter query value",
                    "style": Object {
                      "width": "80%",
                    },
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  state eq 1
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  amount eq 5678
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
              ],
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "tag-state-0",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "state eq 1",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "state eq 1",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
              Object {
                "instance": null,
                "key": "tag-amount-1",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "amount eq 5678",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "amount eq 5678",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
              </code>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678
              </code>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Query URL: ",
                  "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678",
              ],
              "type": "code",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "row",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowMultipleSelection": true,
                "children": Array [
                  <Column
                    name="address"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="amount"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="state"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="supplier"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="name"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="id"
                    renderCell={[Function]}
                  />,
                ],
                "className": "pt-striped",
                "defaultColumnWidth": 150,
                "defaultRowHeight": 20,
                "enableFocus": false,
                "fillBodyWithGhostCells": false,
                "isRowHeaderShown": true,
                "loadingOptions": Array [],
                "minColumnWidth": 50,
                "minRowHeight": 20,
                "numFrozenColumns": 0,
                "numFrozenRows": 0,
                "numRows": 8,
                "renderMode": 1,
                "renderRowHeader": [Function],
                "selectionModes": Array [
                  3,
                  2,
                  1,
                  0,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "column-address",
                  "nodeType": "class",
                  "props": Object {
                    "name": "address",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-amount",
                  "nodeType": "class",
                  "props": Object {
                    "name": "amount",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-state",
                  "nodeType": "class",
                  "props": Object {
                    "name": "state",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-supplier",
                  "nodeType": "class",
                  "props": Object {
                    "name": "supplier",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-name",
                  "nodeType": "class",
                  "props": Object {
                    "name": "name",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-id",
                  "nodeType": "class",
                  "props": Object {
                    "name": "id",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`ContractQuery: index mapStateToProps:  inspection 1`] = `
Object {
  "contractAddress": undefined,
  "contractQuery": Object {
    "error": null,
    "queryResults": Array [
      Object {
        "address": "ddbfe1fe25dfbb91633c576aaadd8d3e377be47b",
        "amount": 5678,
        "id": 149,
        "name": "P_ ?%#@!:* 41769",
        "state": "1",
        "supplier": "Supplier1_1301_24669",
      },
      Object {
        "address": "5112a195a0bf46dbeac6ce2e9a2fbbed50dc3e44",
        "amount": 67,
        "id": 150,
        "name": "P_ ?%#@!:* 92348",
        "state": "2",
        "supplier": "Supplier1",
      },
      Object {
        "address": "eff065f2e1cf483daee729f1f45c92db46fe1092",
        "amount": 1067,
        "id": 151,
        "name": "P_ ?%#@!:* 44366",
        "state": "1",
        "supplier": "Supplier1",
      },
      Object {
        "address": "bd0a5c9f7965e3ff970b2b69eb686a9dd6d93ea3",
        "amount": 32,
        "id": 152,
        "name": "P_ ?%#@!:* 46441",
        "state": "2",
        "supplier": "Supplier0_1301_46441",
      },
      Object {
        "address": "2e126696dd113e8ef1a96f51d4fe21bdec5bb8d4",
        "amount": 32,
        "id": 153,
        "name": "P_ ?%#@!:* 46441",
        "state": "3",
        "supplier": "Supplier1_1301_46441",
      },
      Object {
        "address": "421022d27ad192eb2979d0d102945d05b1b62186",
        "amount": 32,
        "id": 154,
        "name": "P_ ?%#@!:* 46441",
        "state": "3",
        "supplier": "Supplier2_1301_46441",
      },
      Object {
        "address": "1bf900ac2d58688ebd9847ec9993533b4207165e",
        "amount": 5678,
        "id": 155,
        "name": "P_ ?%#@!:* 80772",
        "state": "1",
        "supplier": "Supplier1",
      },
      Object {
        "address": "ad601648712a607acf73cae058d4bc8601c1a724",
        "amount": 100,
        "id": 3,
        "name": "Project_ ? 1452_77996",
        "state": "2",
        "supplier": "Supplier1",
      },
    ],
    "queryString": "",
    "tags": Array [],
    "vars": Object {
      "amount": Object {
        "atBytes": 96,
        "bytes": 32,
        "public": true,
        "signed": false,
        "type": "Int",
      },
      "id": Object {
        "atBytes": 0,
        "bytes": 32,
        "public": true,
        "signed": false,
        "type": "Int",
      },
      "name": Object {
        "atBytes": 32,
        "dynamic": true,
        "public": true,
        "type": "String",
      },
      "state": Object {
        "atBytes": 128,
        "contents": "BidState",
        "public": true,
        "type": "Label",
      },
      "supplier": Object {
        "atBytes": 64,
        "dynamic": true,
        "public": true,
        "type": "String",
      },
    },
  },
  "selectedChain": "ff7ef45acb7a775018bc765b6fdeea432aaddfcd846cf6dd9442724266b1eac9",
}
`;

exports[`ContractQuery: index renders with empty values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContractQuery
    addQueryFilter={[Function]}
    clearQueryString={[Function]}
    contractQuery={
      Object {
        "error": null,
        "queryResults": null,
        "queryString": "",
        "selectedChain": null,
        "tags": Array [],
        "vars": null,
      }
    }
    match={
      Object {
        "params": Object {
          "name": null,
        },
      }
    }
    queryCirrus={[Function]}
    queryCirrusVars={[Function]}
    removeQueryFilter={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
               Table
            </h3>
          </div>
          <div
            className="col-sm-6 smd-pad-16 text-right"
          >
            <Blueprint.Button
              className="pt-icon-arrow-left"
              onClick={[Function]}
              text="Back"
            />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-2"
          >
            <h4>
              Table Specification
            </h4>
          </div>
          <div
            className="col-sm-8"
          >
            <div
              className="pt-control-group smd-full-width smd-vertical-center"
            >
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Org Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Org Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                App Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="App Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Event Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Event Name"
                  type="text"
                  value=""
                />
              </label>
              <div>
                <Blueprint.Switch
                  checked={false}
                  label="Query Contract History"
                  onChange={[Function]}
                />
              </div>
            </div>
          </div>
          <div
            className="col-sm-2"
          >
            <Blueprint.Button
              className="pt-intent-primary"
              onClick={[Function]}
            >
              Go
            </Blueprint.Button>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          />
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/null?
            </code>
          </div>
        </div>,
        <div
          className="row"
        />,
        <div
          className="row"
        >
          <NonIdealState
            description={
              <div>
                <p>
                  There was no data found in the selected table name.
                </p>
                <hr />
                <p>
                  Try adding the Organization that created this Contract or the App Name that this Contract is a part of.
                </p>
              </div>
            }
            title="No Results"
            visual="pt-icon-folder-open"
          />
        </div>,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6"
            >
              <h3>
                 Table
              </h3>
            </div>,
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                 Table
              </h3>,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  null,
                  " Table",
                ],
              },
              "ref": null,
              "rendered": Array [
                null,
                " Table",
              ],
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />,
              "className": "col-sm-6 smd-pad-16 text-right",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "pt-icon-arrow-left",
                "onClick": [Function],
                "text": "Back",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>,
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>,
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h4>
                Table Specification
              </h4>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Table Specification",
              },
              "ref": null,
              "rendered": "Table Specification",
              "type": "h4",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>,
                ],
                "className": "pt-control-group smd-full-width smd-vertical-center",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Org Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Org Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Org Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "App Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "App Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "App Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Event Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Event Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Event Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "checked": false,
                      "label": "Query Contract History",
                      "onChange": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Go",
                "className": "pt-intent-primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Go",
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                  </select>
                </div>,
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>,
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />,
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />,
              ],
              "className": "pt-control-group smd-full-width",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option>
                        Select field
                      </option>,
                      <option
                        value="address"
                      >
                        Address
                      </option>,
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>,
                      null,
                    ],
                    "className": "pt-select",
                    "onChange": [Function],
                    "value": "Select field",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Select field",
                      },
                      "ref": null,
                      "rendered": "Select field",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "Address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Shard ID",
                        "value": "chainId",
                      },
                      "ref": null,
                      "rendered": "Shard ID",
                      "type": "option",
                    },
                    null,
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="eq"
                      >
                        =
                      </option>,
                      <option
                        value="neq"
                      >
                        !=
                      </option>,
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>,
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>,
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>,
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>,
                      <option
                        value="in"
                      >
                        IN
                      </option>,
                      <option
                        value="like"
                      >
                        LIKE
                      </option>,
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>,
                    ],
                    "onChange": [Function],
                    "value": "eq",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "=",
                        "value": "eq",
                      },
                      "ref": null,
                      "rendered": "=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "!=",
                        "value": "neq",
                      },
                      "ref": null,
                      "rendered": "!=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<",
                        "value": "lt",
                      },
                      "ref": null,
                      "rendered": "<",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<=",
                        "value": "lte",
                      },
                      "ref": null,
                      "rendered": "<=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">",
                        "value": "gt",
                      },
                      "ref": null,
                      "rendered": ">",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">=",
                        "value": "gte",
                      },
                      "ref": null,
                      "rendered": ">=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "IN",
                        "value": "in",
                      },
                      "ref": null,
                      "rendered": "IN",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "LIKE",
                        "value": "like",
                      },
                      "ref": null,
                      "rendered": "LIKE",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "ILIKE",
                        "value": "ilike",
                      },
                      "ref": null,
                      "rendered": "ILIKE",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-input",
                  "onChange": [Function],
                  "onKeyUp": [Function],
                  "placeholder": "Enter query value",
                  "style": Object {
                    "width": "80%",
                  },
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                  "disabled": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          />,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/null?
            </code>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <code>
              Query URL: 
              http://localhost/cirrus/search/null?
            </code>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/null?",
              ],
            },
            "ref": null,
            "rendered": Array [
              "Query URL: ",
              "http://localhost/cirrus/search/null?",
            ],
            "type": "code",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "row",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <NonIdealState
            description={
              <div>
                <p>
                  There was no data found in the selected table name.
                </p>
                <hr />
                <p>
                  Try adding the Organization that created this Contract or the App Name that this Contract is a part of.
                </p>
              </div>
            }
            title="No Results"
            visual="pt-icon-folder-open"
          />,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "description": <div>
              <p>
                There was no data found in the selected table name.
              </p>
              <hr />
              <p>
                Try adding the Organization that created this Contract or the App Name that this Contract is a part of.
              </p>
            </div>,
            "title": "No Results",
            "visual": "pt-icon-folder-open",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                 Table
              </h3>
            </div>
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            />
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/null?
              </code>
            </div>
          </div>,
          <div
            className="row"
          />,
          <div
            className="row"
          >
            <NonIdealState
              description={
                <div>
                  <p>
                    There was no data found in the selected table name.
                  </p>
                  <hr />
                  <p>
                    Try adding the Organization that created this Contract or the App Name that this Contract is a part of.
                  </p>
                </div>
              }
              title="No Results"
              visual="pt-icon-folder-open"
            />
          </div>,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6"
              >
                <h3>
                   Table
                </h3>
              </div>,
              <div
                className="col-sm-6 smd-pad-16 text-right"
              >
                <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                   Table
                </h3>,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    null,
                    " Table",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  null,
                  " Table",
                ],
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />,
                "className": "col-sm-6 smd-pad-16 text-right",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "pt-icon-arrow-left",
                  "onClick": [Function],
                  "text": "Back",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-2"
              >
                <h4>
                  Table Specification
                </h4>
              </div>,
              <div
                className="col-sm-8"
              >
                <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="col-sm-2"
              >
                <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h4>
                  Table Specification
                </h4>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Table Specification",
                },
                "ref": null,
                "rendered": "Table Specification",
                "type": "h4",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Org Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      App Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Event Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <div>
                      <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />
                    </div>,
                  ],
                  "className": "pt-control-group smd-full-width smd-vertical-center",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Org Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Org Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Org Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Org Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "App Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="App Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "App Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "App Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Event Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Event Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Event Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Event Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "checked": false,
                        "label": "Query Contract History",
                        "onChange": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Go",
                  "className": "pt-intent-primary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Go",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="pt-select"
                  >
                    <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                    </select>
                  </div>,
                  <div
                    className="pt-select"
                  >
                    <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>
                  </div>,
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    onKeyUp={[Function]}
                    placeholder="Enter query value"
                    style={
                      Object {
                        "width": "80%",
                      }
                    }
                    type="text"
                    value=""
                  />,
                  <button
                    className="pt-button pt-intent-primary pt-icon-arrow-right"
                    disabled={true}
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-control-group smd-full-width",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option>
                          Select field
                        </option>,
                        <option
                          value="address"
                        >
                          Address
                        </option>,
                        <option
                          value="chainId"
                        >
                          Shard ID
                        </option>,
                        null,
                      ],
                      "className": "pt-select",
                      "onChange": [Function],
                      "value": "Select field",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Select field",
                        },
                        "ref": null,
                        "rendered": "Select field",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "Address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Shard ID",
                          "value": "chainId",
                        },
                        "ref": null,
                        "rendered": "Shard ID",
                        "type": "option",
                      },
                      null,
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="eq"
                        >
                          =
                        </option>,
                        <option
                          value="neq"
                        >
                          !=
                        </option>,
                        <option
                          value="lt"
                        >
                          &lt;
                        </option>,
                        <option
                          value="lte"
                        >
                          &lt;=
                        </option>,
                        <option
                          value="gt"
                        >
                          &gt;
                        </option>,
                        <option
                          value="gte"
                        >
                          &gt;=
                        </option>,
                        <option
                          value="in"
                        >
                          IN
                        </option>,
                        <option
                          value="like"
                        >
                          LIKE
                        </option>,
                        <option
                          value="ilike"
                        >
                          ILIKE
                        </option>,
                      ],
                      "onChange": [Function],
                      "value": "eq",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "=",
                          "value": "eq",
                        },
                        "ref": null,
                        "rendered": "=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "!=",
                          "value": "neq",
                        },
                        "ref": null,
                        "rendered": "!=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<",
                          "value": "lt",
                        },
                        "ref": null,
                        "rendered": "<",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<=",
                          "value": "lte",
                        },
                        "ref": null,
                        "rendered": "<=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">",
                          "value": "gt",
                        },
                        "ref": null,
                        "rendered": ">",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">=",
                          "value": "gte",
                        },
                        "ref": null,
                        "rendered": ">=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "IN",
                          "value": "in",
                        },
                        "ref": null,
                        "rendered": "IN",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "LIKE",
                          "value": "like",
                        },
                        "ref": null,
                        "rendered": "LIKE",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "ILIKE",
                          "value": "ilike",
                        },
                        "ref": null,
                        "rendered": "ILIKE",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-input",
                    "onChange": [Function],
                    "onKeyUp": [Function],
                    "placeholder": "Enter query value",
                    "style": Object {
                      "width": "80%",
                    },
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            />,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [],
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Array [],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/null?
              </code>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <code>
                Query URL: 
                http://localhost/cirrus/search/null?
              </code>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Query URL: ",
                  "http://localhost/cirrus/search/null?",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/null?",
              ],
              "type": "code",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "row",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <NonIdealState
              description={
                <div>
                  <p>
                    There was no data found in the selected table name.
                  </p>
                  <hr />
                  <p>
                    Try adding the Organization that created this Contract or the App Name that this Contract is a part of.
                  </p>
                </div>
              }
              title="No Results"
              visual="pt-icon-folder-open"
            />,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "description": <div>
                <p>
                  There was no data found in the selected table name.
                </p>
                <hr />
                <p>
                  Try adding the Organization that created this Contract or the App Name that this Contract is a part of.
                </p>
              </div>,
              "title": "No Results",
              "visual": "pt-icon-folder-open",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`ContractQuery: index renders with query result, vars and filter tags 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ContractQuery
    addQueryFilter={[Function]}
    clearQueryString={[Function]}
    contractQuery={
      Object {
        "error": null,
        "queryResults": Array [
          Object {
            "address": "ddbfe1fe25dfbb91633c576aaadd8d3e377be47b",
            "amount": 5678,
            "id": 149,
            "name": "P_ ?%#@!:* 41769",
            "state": "1",
            "supplier": "Supplier1_1301_24669",
          },
          Object {
            "address": "5112a195a0bf46dbeac6ce2e9a2fbbed50dc3e44",
            "amount": 67,
            "id": 150,
            "name": "P_ ?%#@!:* 92348",
            "state": "2",
            "supplier": "Supplier1",
          },
          Object {
            "address": "eff065f2e1cf483daee729f1f45c92db46fe1092",
            "amount": 1067,
            "id": 151,
            "name": "P_ ?%#@!:* 44366",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "bd0a5c9f7965e3ff970b2b69eb686a9dd6d93ea3",
            "amount": 32,
            "id": 152,
            "name": "P_ ?%#@!:* 46441",
            "state": "2",
            "supplier": "Supplier0_1301_46441",
          },
          Object {
            "address": "2e126696dd113e8ef1a96f51d4fe21bdec5bb8d4",
            "amount": 32,
            "id": 153,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier1_1301_46441",
          },
          Object {
            "address": "421022d27ad192eb2979d0d102945d05b1b62186",
            "amount": 32,
            "id": 154,
            "name": "P_ ?%#@!:* 46441",
            "state": "3",
            "supplier": "Supplier2_1301_46441",
          },
          Object {
            "address": "1bf900ac2d58688ebd9847ec9993533b4207165e",
            "amount": 5678,
            "id": 155,
            "name": "P_ ?%#@!:* 80772",
            "state": "1",
            "supplier": "Supplier1",
          },
          Object {
            "address": "ad601648712a607acf73cae058d4bc8601c1a724",
            "amount": 100,
            "id": 3,
            "name": "Project_ ? 1452_77996",
            "state": "2",
            "supplier": "Supplier1",
          },
        ],
        "queryString": "state=eq.1&amount=eq.5678&name=eq.P",
        "selectedChain": "ff7ef45acb7a775018bc765b6fdeea432aaddfcd846cf6dd9442724266b1eac9",
        "tags": Array [
          Object {
            "display": "state eq 1",
            "field": "state",
            "operator": "eq",
            "value": "1",
          },
          Object {
            "display": "amount eq 5678",
            "field": "amount",
            "operator": "eq",
            "value": "5678",
          },
          Object {
            "display": "name eq P",
            "field": "name",
            "operator": "eq",
            "value": "P",
          },
        ],
        "vars": Object {
          "amount": Object {
            "atBytes": 96,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "id": Object {
            "atBytes": 0,
            "bytes": 32,
            "public": true,
            "signed": false,
            "type": "Int",
          },
          "name": Object {
            "atBytes": 32,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
          "state": Object {
            "atBytes": 128,
            "contents": "BidState",
            "public": true,
            "type": "Label",
          },
          "supplier": Object {
            "atBytes": 64,
            "dynamic": true,
            "public": true,
            "type": "String",
          },
        },
      }
    }
    match={
      Object {
        "isExact": true,
        "params": Object {
          "name": "Bid",
        },
        "path": "/contracts/:name/query",
        "url": "/contracts/Bid/query",
      }
    }
    queryCirrus={[Function]}
    queryCirrusVars={[Function]}
    removeQueryFilter={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
              Bid
               Table
            </h3>
          </div>
          <div
            className="col-sm-6 smd-pad-16 text-right"
          >
            <Blueprint.Button
              className="pt-icon-arrow-left"
              onClick={[Function]}
              text="Back"
            />
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-2"
          >
            <h4>
              Table Specification
            </h4>
          </div>
          <div
            className="col-sm-8"
          >
            <div
              className="pt-control-group smd-full-width smd-vertical-center"
            >
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Org Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Org Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                App Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="App Name"
                  type="text"
                  value=""
                />
              </label>
              <label
                className="pt-label pt-inline"
                style={
                  Object {
                    "marginRight": "15px",
                  }
                }
              >
                Event Name:
                <input
                  className="pt-input"
                  onChange={[Function]}
                  placeholder="Event Name"
                  type="text"
                  value=""
                />
              </label>
              <div>
                <Blueprint.Switch
                  checked={false}
                  label="Query Contract History"
                  onChange={[Function]}
                />
              </div>
            </div>
          </div>
          <div
            className="col-sm-2"
          >
            <Blueprint.Button
              className="pt-intent-primary"
              onClick={[Function]}
            >
              Go
            </Blueprint.Button>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              state eq 1
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              amount eq 5678
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              name eq P
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
          </div>
        </div>,
        <div
          className="row"
        >
          <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P
            </code>
          </div>
        </div>,
        <div
          className="row"
        />,
        <div
          className="row"
        >
          <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>
        </div>,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>,
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Bid
                 Table
              </h3>,
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Bid",
                  " Table",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Bid",
                " Table",
              ],
              "type": "h3",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />,
              "className": "col-sm-6 smd-pad-16 text-right",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "pt-icon-arrow-left",
                "onClick": [Function],
                "text": "Back",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>,
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>,
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>,
          ],
          "className": "row",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h4>
                Table Specification
              </h4>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Table Specification",
              },
              "ref": null,
              "rendered": "Table Specification",
              "type": "h4",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>,
              "className": "col-sm-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>,
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>,
                ],
                "className": "pt-control-group smd-full-width smd-vertical-center",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Org Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Org Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Org Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "App Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "App Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "App Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Event Name:",
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />,
                    ],
                    "className": "pt-label pt-inline",
                    "style": Object {
                      "marginRight": "15px",
                    },
                  },
                  "ref": null,
                  "rendered": Array [
                    "Event Name:",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "pt-input",
                        "onChange": [Function],
                        "placeholder": "Event Name",
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "checked": false,
                      "label": "Query Contract History",
                      "onChange": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": "div",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>,
              "className": "col-sm-2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Go",
                "className": "pt-intent-primary",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Go",
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="pt-control-group smd-full-width"
            >
              <div
                className="pt-select"
              >
                <select
                  className="pt-select"
                  onChange={[Function]}
                  value="Select field"
                >
                  <option>
                    Select field
                  </option>
                  <option
                    value="address"
                  >
                    Address
                  </option>
                  <option
                    value="chainId"
                  >
                    Shard ID
                  </option>
                  <option
                    value="address"
                  >
                    address
                  </option>
                  <option
                    value="amount"
                  >
                    amount
                  </option>
                  <option
                    value="state"
                  >
                    state
                  </option>
                  <option
                    value="supplier"
                  >
                    supplier
                  </option>
                  <option
                    value="name"
                  >
                    name
                  </option>
                  <option
                    value="id"
                  >
                    id
                  </option>
                </select>
              </div>
              <div
                className="pt-select"
              >
                <select
                  onChange={[Function]}
                  value="eq"
                >
                  <option
                    value="eq"
                  >
                    =
                  </option>
                  <option
                    value="neq"
                  >
                    !=
                  </option>
                  <option
                    value="lt"
                  >
                    &lt;
                  </option>
                  <option
                    value="lte"
                  >
                    &lt;=
                  </option>
                  <option
                    value="gt"
                  >
                    &gt;
                  </option>
                  <option
                    value="gte"
                  >
                    &gt;=
                  </option>
                  <option
                    value="in"
                  >
                    IN
                  </option>
                  <option
                    value="like"
                  >
                    LIKE
                  </option>
                  <option
                    value="ilike"
                  >
                    ILIKE
                  </option>
                </select>
              </div>
              <input
                className="pt-input"
                onChange={[Function]}
                onKeyUp={[Function]}
                placeholder="Enter query value"
                style={
                  Object {
                    "width": "80%",
                  }
                }
                type="text"
                value=""
              />
              <button
                className="pt-button pt-intent-primary pt-icon-arrow-right"
                disabled={true}
                onClick={[Function]}
              />
            </div>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>,
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>,
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />,
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />,
              ],
              "className": "pt-control-group smd-full-width",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option>
                        Select field
                      </option>,
                      <option
                        value="address"
                      >
                        Address
                      </option>,
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>,
                      Array [
                        <option
                          value="address"
                        >
                          address
                        </option>,
                        <option
                          value="amount"
                        >
                          amount
                        </option>,
                        <option
                          value="state"
                        >
                          state
                        </option>,
                        <option
                          value="supplier"
                        >
                          supplier
                        </option>,
                        <option
                          value="name"
                        >
                          name
                        </option>,
                        <option
                          value="id"
                        >
                          id
                        </option>,
                      ],
                    ],
                    "className": "pt-select",
                    "onChange": [Function],
                    "value": "Select field",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Select field",
                      },
                      "ref": null,
                      "rendered": "Select field",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "Address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Shard ID",
                        "value": "chainId",
                      },
                      "ref": null,
                      "rendered": "Shard ID",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-address",
                      "nodeType": "host",
                      "props": Object {
                        "children": "address",
                        "value": "address",
                      },
                      "ref": null,
                      "rendered": "address",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-amount",
                      "nodeType": "host",
                      "props": Object {
                        "children": "amount",
                        "value": "amount",
                      },
                      "ref": null,
                      "rendered": "amount",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-state",
                      "nodeType": "host",
                      "props": Object {
                        "children": "state",
                        "value": "state",
                      },
                      "ref": null,
                      "rendered": "state",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-supplier",
                      "nodeType": "host",
                      "props": Object {
                        "children": "supplier",
                        "value": "supplier",
                      },
                      "ref": null,
                      "rendered": "supplier",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-name",
                      "nodeType": "host",
                      "props": Object {
                        "children": "name",
                        "value": "name",
                      },
                      "ref": null,
                      "rendered": "name",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": "Bid-field-id",
                      "nodeType": "host",
                      "props": Object {
                        "children": "id",
                        "value": "id",
                      },
                      "ref": null,
                      "rendered": "id",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>,
                  "className": "pt-select",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value="eq"
                      >
                        =
                      </option>,
                      <option
                        value="neq"
                      >
                        !=
                      </option>,
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>,
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>,
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>,
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>,
                      <option
                        value="in"
                      >
                        IN
                      </option>,
                      <option
                        value="like"
                      >
                        LIKE
                      </option>,
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>,
                    ],
                    "onChange": [Function],
                    "value": "eq",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "=",
                        "value": "eq",
                      },
                      "ref": null,
                      "rendered": "=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "!=",
                        "value": "neq",
                      },
                      "ref": null,
                      "rendered": "!=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<",
                        "value": "lt",
                      },
                      "ref": null,
                      "rendered": "<",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "<=",
                        "value": "lte",
                      },
                      "ref": null,
                      "rendered": "<=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">",
                        "value": "gt",
                      },
                      "ref": null,
                      "rendered": ">",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": ">=",
                        "value": "gte",
                      },
                      "ref": null,
                      "rendered": ">=",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "IN",
                        "value": "in",
                      },
                      "ref": null,
                      "rendered": "IN",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "LIKE",
                        "value": "like",
                      },
                      "ref": null,
                      "rendered": "LIKE",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "ILIKE",
                        "value": "ilike",
                      },
                      "ref": null,
                      "rendered": "ILIKE",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-input",
                  "onChange": [Function],
                  "onKeyUp": [Function],
                  "placeholder": "Enter query value",
                  "style": Object {
                    "width": "80%",
                  },
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                  "disabled": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "button",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              state eq 1
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              amount eq 5678
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
            <span
              className="pt-tag pt-tag-removable smd-margin-right"
            >
              name eq P
              <button
                className="pt-tag-remove"
                onClick={[Function]}
              />
            </span>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                name eq P
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>,
            ],
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "tag-state-0",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "state eq 1",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "state eq 1",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": "tag-amount-1",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "amount eq 5678",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "amount eq 5678",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
            Object {
              "instance": null,
              "key": "tag-name-2",
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "name eq P",
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-tag pt-tag-removable smd-margin-right",
              },
              "ref": null,
              "rendered": Array [
                "name eq P",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-tag-remove",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "span",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12 smd-pad-8"
          >
            <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P
            </code>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <code>
              Query URL: 
              http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P
            </code>,
            "className": "col-sm-12 smd-pad-8",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P",
              ],
            },
            "ref": null,
            "rendered": Array [
              "Query URL: ",
              "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P",
            ],
            "type": "code",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "row",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-12"
          >
            <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Table
              allowMultipleSelection={true}
              className="pt-striped"
              defaultColumnWidth={150}
              defaultRowHeight={20}
              enableFocus={false}
              fillBodyWithGhostCells={false}
              isRowHeaderShown={true}
              loadingOptions={Array []}
              minColumnWidth={50}
              minRowHeight={20}
              numFrozenColumns={0}
              numFrozenRows={0}
              numRows={8}
              renderMode={1}
              renderRowHeader={[Function]}
              selectionModes={
                Array [
                  3,
                  2,
                  1,
                  0,
                ]
              }
            >
              <Column
                name="address"
                renderCell={[Function]}
              />
              <Column
                name="amount"
                renderCell={[Function]}
              />
              <Column
                name="state"
                renderCell={[Function]}
              />
              <Column
                name="supplier"
                renderCell={[Function]}
              />
              <Column
                name="name"
                renderCell={[Function]}
              />
              <Column
                name="id"
                renderCell={[Function]}
              />
            </Table>,
            "className": "col-sm-12",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowMultipleSelection": true,
              "children": Array [
                <Column
                  name="address"
                  renderCell={[Function]}
                />,
                <Column
                  name="amount"
                  renderCell={[Function]}
                />,
                <Column
                  name="state"
                  renderCell={[Function]}
                />,
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />,
                <Column
                  name="name"
                  renderCell={[Function]}
                />,
                <Column
                  name="id"
                  renderCell={[Function]}
                />,
              ],
              "className": "pt-striped",
              "defaultColumnWidth": 150,
              "defaultRowHeight": 20,
              "enableFocus": false,
              "fillBodyWithGhostCells": false,
              "isRowHeaderShown": true,
              "loadingOptions": Array [],
              "minColumnWidth": 50,
              "minRowHeight": 20,
              "numFrozenColumns": 0,
              "numFrozenRows": 0,
              "numRows": 8,
              "renderMode": 1,
              "renderRowHeader": [Function],
              "selectionModes": Array [
                3,
                2,
                1,
                0,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "column-address",
                "nodeType": "class",
                "props": Object {
                  "name": "address",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-amount",
                "nodeType": "class",
                "props": Object {
                  "name": "amount",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-state",
                "nodeType": "class",
                "props": Object {
                  "name": "state",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-supplier",
                "nodeType": "class",
                "props": Object {
                  "name": "supplier",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-name",
                "nodeType": "class",
                "props": Object {
                  "name": "name",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "column-id",
                "nodeType": "class",
                "props": Object {
                  "name": "id",
                  "renderCell": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Bid
                 Table
              </h3>
            </div>
            <div
              className="col-sm-6 smd-pad-16 text-right"
            >
              <Blueprint.Button
                className="pt-icon-arrow-left"
                onClick={[Function]}
                text="Back"
              />
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-2"
            >
              <h4>
                Table Specification
              </h4>
            </div>
            <div
              className="col-sm-8"
            >
              <div
                className="pt-control-group smd-full-width smd-vertical-center"
              >
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Org Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Org Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  App Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="App Name"
                    type="text"
                    value=""
                  />
                </label>
                <label
                  className="pt-label pt-inline"
                  style={
                    Object {
                      "marginRight": "15px",
                    }
                  }
                >
                  Event Name:
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    placeholder="Event Name"
                    type="text"
                    value=""
                  />
                </label>
                <div>
                  <Blueprint.Switch
                    checked={false}
                    label="Query Contract History"
                    onChange={[Function]}
                  />
                </div>
              </div>
            </div>
            <div
              className="col-sm-2"
            >
              <Blueprint.Button
                className="pt-intent-primary"
                onClick={[Function]}
              >
                Go
              </Blueprint.Button>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                name eq P
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
            </div>
          </div>,
          <div
            className="row"
          >
            <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P
              </code>
            </div>
          </div>,
          <div
            className="row"
          />,
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>
          </div>,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-6"
              >
                <h3>
                  Bid
                   Table
                </h3>
              </div>,
              <div
                className="col-sm-6 smd-pad-16 text-right"
              >
                <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Bid
                   Table
                </h3>,
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Bid",
                    " Table",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Bid",
                  " Table",
                ],
                "type": "h3",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-icon-arrow-left"
                  onClick={[Function]}
                  text="Back"
                />,
                "className": "col-sm-6 smd-pad-16 text-right",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "pt-icon-arrow-left",
                  "onClick": [Function],
                  "text": "Back",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="col-sm-2"
              >
                <h4>
                  Table Specification
                </h4>
              </div>,
              <div
                className="col-sm-8"
              >
                <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>
              </div>,
              <div
                className="col-sm-2"
              >
                <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>
              </div>,
            ],
            "className": "row",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h4>
                  Table Specification
                </h4>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Table Specification",
                },
                "ref": null,
                "rendered": "Table Specification",
                "type": "h4",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="pt-control-group smd-full-width smd-vertical-center"
                >
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Org Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Org Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    App Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="App Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <label
                    className="pt-label pt-inline"
                    style={
                      Object {
                        "marginRight": "15px",
                      }
                    }
                  >
                    Event Name:
                    <input
                      className="pt-input"
                      onChange={[Function]}
                      placeholder="Event Name"
                      type="text"
                      value=""
                    />
                  </label>
                  <div>
                    <Blueprint.Switch
                      checked={false}
                      label="Query Contract History"
                      onChange={[Function]}
                    />
                  </div>
                </div>,
                "className": "col-sm-8",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Org Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Org Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      App Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="App Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <label
                      className="pt-label pt-inline"
                      style={
                        Object {
                          "marginRight": "15px",
                        }
                      }
                    >
                      Event Name:
                      <input
                        className="pt-input"
                        onChange={[Function]}
                        placeholder="Event Name"
                        type="text"
                        value=""
                      />
                    </label>,
                    <div>
                      <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />
                    </div>,
                  ],
                  "className": "pt-control-group smd-full-width smd-vertical-center",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Org Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Org Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Org Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Org Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "App Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="App Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "App Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "App Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Event Name:",
                        <input
                          className="pt-input"
                          onChange={[Function]}
                          placeholder="Event Name"
                          type="text"
                          value=""
                        />,
                      ],
                      "className": "pt-label pt-inline",
                      "style": Object {
                        "marginRight": "15px",
                      },
                    },
                    "ref": null,
                    "rendered": Array [
                      "Event Name:",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "pt-input",
                          "onChange": [Function],
                          "placeholder": "Event Name",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <Blueprint.Switch
                        checked={false}
                        label="Query Contract History"
                        onChange={[Function]}
                      />,
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "checked": false,
                        "label": "Query Contract History",
                        "onChange": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": "div",
                  },
                ],
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Blueprint.Button
                  className="pt-intent-primary"
                  onClick={[Function]}
                >
                  Go
                </Blueprint.Button>,
                "className": "col-sm-2",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Go",
                  "className": "pt-intent-primary",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Go",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="pt-control-group smd-full-width"
              >
                <div
                  className="pt-select"
                >
                  <select
                    className="pt-select"
                    onChange={[Function]}
                    value="Select field"
                  >
                    <option>
                      Select field
                    </option>
                    <option
                      value="address"
                    >
                      Address
                    </option>
                    <option
                      value="chainId"
                    >
                      Shard ID
                    </option>
                    <option
                      value="address"
                    >
                      address
                    </option>
                    <option
                      value="amount"
                    >
                      amount
                    </option>
                    <option
                      value="state"
                    >
                      state
                    </option>
                    <option
                      value="supplier"
                    >
                      supplier
                    </option>
                    <option
                      value="name"
                    >
                      name
                    </option>
                    <option
                      value="id"
                    >
                      id
                    </option>
                  </select>
                </div>
                <div
                  className="pt-select"
                >
                  <select
                    onChange={[Function]}
                    value="eq"
                  >
                    <option
                      value="eq"
                    >
                      =
                    </option>
                    <option
                      value="neq"
                    >
                      !=
                    </option>
                    <option
                      value="lt"
                    >
                      &lt;
                    </option>
                    <option
                      value="lte"
                    >
                      &lt;=
                    </option>
                    <option
                      value="gt"
                    >
                      &gt;
                    </option>
                    <option
                      value="gte"
                    >
                      &gt;=
                    </option>
                    <option
                      value="in"
                    >
                      IN
                    </option>
                    <option
                      value="like"
                    >
                      LIKE
                    </option>
                    <option
                      value="ilike"
                    >
                      ILIKE
                    </option>
                  </select>
                </div>
                <input
                  className="pt-input"
                  onChange={[Function]}
                  onKeyUp={[Function]}
                  placeholder="Enter query value"
                  style={
                    Object {
                      "width": "80%",
                    }
                  }
                  type="text"
                  value=""
                />
                <button
                  className="pt-button pt-intent-primary pt-icon-arrow-right"
                  disabled={true}
                  onClick={[Function]}
                />
              </div>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="pt-select"
                  >
                    <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>
                  </div>,
                  <div
                    className="pt-select"
                  >
                    <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>
                  </div>,
                  <input
                    className="pt-input"
                    onChange={[Function]}
                    onKeyUp={[Function]}
                    placeholder="Enter query value"
                    style={
                      Object {
                        "width": "80%",
                      }
                    }
                    type="text"
                    value=""
                  />,
                  <button
                    className="pt-button pt-intent-primary pt-icon-arrow-right"
                    disabled={true}
                    onClick={[Function]}
                  />,
                ],
                "className": "pt-control-group smd-full-width",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      className="pt-select"
                      onChange={[Function]}
                      value="Select field"
                    >
                      <option>
                        Select field
                      </option>
                      <option
                        value="address"
                      >
                        Address
                      </option>
                      <option
                        value="chainId"
                      >
                        Shard ID
                      </option>
                      <option
                        value="address"
                      >
                        address
                      </option>
                      <option
                        value="amount"
                      >
                        amount
                      </option>
                      <option
                        value="state"
                      >
                        state
                      </option>
                      <option
                        value="supplier"
                      >
                        supplier
                      </option>
                      <option
                        value="name"
                      >
                        name
                      </option>
                      <option
                        value="id"
                      >
                        id
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option>
                          Select field
                        </option>,
                        <option
                          value="address"
                        >
                          Address
                        </option>,
                        <option
                          value="chainId"
                        >
                          Shard ID
                        </option>,
                        Array [
                          <option
                            value="address"
                          >
                            address
                          </option>,
                          <option
                            value="amount"
                          >
                            amount
                          </option>,
                          <option
                            value="state"
                          >
                            state
                          </option>,
                          <option
                            value="supplier"
                          >
                            supplier
                          </option>,
                          <option
                            value="name"
                          >
                            name
                          </option>,
                          <option
                            value="id"
                          >
                            id
                          </option>,
                        ],
                      ],
                      "className": "pt-select",
                      "onChange": [Function],
                      "value": "Select field",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Select field",
                        },
                        "ref": null,
                        "rendered": "Select field",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "Address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Shard ID",
                          "value": "chainId",
                        },
                        "ref": null,
                        "rendered": "Shard ID",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-address",
                        "nodeType": "host",
                        "props": Object {
                          "children": "address",
                          "value": "address",
                        },
                        "ref": null,
                        "rendered": "address",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-amount",
                        "nodeType": "host",
                        "props": Object {
                          "children": "amount",
                          "value": "amount",
                        },
                        "ref": null,
                        "rendered": "amount",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-state",
                        "nodeType": "host",
                        "props": Object {
                          "children": "state",
                          "value": "state",
                        },
                        "ref": null,
                        "rendered": "state",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-supplier",
                        "nodeType": "host",
                        "props": Object {
                          "children": "supplier",
                          "value": "supplier",
                        },
                        "ref": null,
                        "rendered": "supplier",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-name",
                        "nodeType": "host",
                        "props": Object {
                          "children": "name",
                          "value": "name",
                        },
                        "ref": null,
                        "rendered": "name",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": "Bid-field-id",
                        "nodeType": "host",
                        "props": Object {
                          "children": "id",
                          "value": "id",
                        },
                        "ref": null,
                        "rendered": "id",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <select
                      onChange={[Function]}
                      value="eq"
                    >
                      <option
                        value="eq"
                      >
                        =
                      </option>
                      <option
                        value="neq"
                      >
                        !=
                      </option>
                      <option
                        value="lt"
                      >
                        &lt;
                      </option>
                      <option
                        value="lte"
                      >
                        &lt;=
                      </option>
                      <option
                        value="gt"
                      >
                        &gt;
                      </option>
                      <option
                        value="gte"
                      >
                        &gt;=
                      </option>
                      <option
                        value="in"
                      >
                        IN
                      </option>
                      <option
                        value="like"
                      >
                        LIKE
                      </option>
                      <option
                        value="ilike"
                      >
                        ILIKE
                      </option>
                    </select>,
                    "className": "pt-select",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <option
                          value="eq"
                        >
                          =
                        </option>,
                        <option
                          value="neq"
                        >
                          !=
                        </option>,
                        <option
                          value="lt"
                        >
                          &lt;
                        </option>,
                        <option
                          value="lte"
                        >
                          &lt;=
                        </option>,
                        <option
                          value="gt"
                        >
                          &gt;
                        </option>,
                        <option
                          value="gte"
                        >
                          &gt;=
                        </option>,
                        <option
                          value="in"
                        >
                          IN
                        </option>,
                        <option
                          value="like"
                        >
                          LIKE
                        </option>,
                        <option
                          value="ilike"
                        >
                          ILIKE
                        </option>,
                      ],
                      "onChange": [Function],
                      "value": "eq",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "=",
                          "value": "eq",
                        },
                        "ref": null,
                        "rendered": "=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "!=",
                          "value": "neq",
                        },
                        "ref": null,
                        "rendered": "!=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<",
                          "value": "lt",
                        },
                        "ref": null,
                        "rendered": "<",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "<=",
                          "value": "lte",
                        },
                        "ref": null,
                        "rendered": "<=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">",
                          "value": "gt",
                        },
                        "ref": null,
                        "rendered": ">",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": ">=",
                          "value": "gte",
                        },
                        "ref": null,
                        "rendered": ">=",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "IN",
                          "value": "in",
                        },
                        "ref": null,
                        "rendered": "IN",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "LIKE",
                          "value": "like",
                        },
                        "ref": null,
                        "rendered": "LIKE",
                        "type": "option",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "ILIKE",
                          "value": "ilike",
                        },
                        "ref": null,
                        "rendered": "ILIKE",
                        "type": "option",
                      },
                    ],
                    "type": "select",
                  },
                  "type": "div",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-input",
                    "onChange": [Function],
                    "onKeyUp": [Function],
                    "placeholder": "Enter query value",
                    "style": Object {
                      "width": "80%",
                    },
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "pt-button pt-intent-primary pt-icon-arrow-right",
                    "disabled": true,
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "button",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                state eq 1
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                amount eq 5678
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
              <span
                className="pt-tag pt-tag-removable smd-margin-right"
              >
                name eq P
                <button
                  className="pt-tag-remove"
                  onClick={[Function]}
                />
              </span>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  state eq 1
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  amount eq 5678
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
                <span
                  className="pt-tag pt-tag-removable smd-margin-right"
                >
                  name eq P
                  <button
                    className="pt-tag-remove"
                    onClick={[Function]}
                  />
                </span>,
              ],
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "tag-state-0",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "state eq 1",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "state eq 1",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
              Object {
                "instance": null,
                "key": "tag-amount-1",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "amount eq 5678",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "amount eq 5678",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
              Object {
                "instance": null,
                "key": "tag-name-2",
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "name eq P",
                    <button
                      className="pt-tag-remove"
                      onClick={[Function]}
                    />,
                  ],
                  "className": "pt-tag pt-tag-removable smd-margin-right",
                },
                "ref": null,
                "rendered": Array [
                  "name eq P",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "pt-tag-remove",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "button",
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12 smd-pad-8"
            >
              <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P
              </code>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <code>
                Query URL: 
                http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P
              </code>,
              "className": "col-sm-12 smd-pad-8",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Query URL: ",
                  "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P",
                ],
              },
              "ref": null,
              "rendered": Array [
                "Query URL: ",
                "http://localhost/cirrus/search/Bid?state=eq.1&amount=eq.5678&name=eq.P",
              ],
              "type": "code",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "row",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-12"
            >
              <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Table
                allowMultipleSelection={true}
                className="pt-striped"
                defaultColumnWidth={150}
                defaultRowHeight={20}
                enableFocus={false}
                fillBodyWithGhostCells={false}
                isRowHeaderShown={true}
                loadingOptions={Array []}
                minColumnWidth={50}
                minRowHeight={20}
                numFrozenColumns={0}
                numFrozenRows={0}
                numRows={8}
                renderMode={1}
                renderRowHeader={[Function]}
                selectionModes={
                  Array [
                    3,
                    2,
                    1,
                    0,
                  ]
                }
              >
                <Column
                  name="address"
                  renderCell={[Function]}
                />
                <Column
                  name="amount"
                  renderCell={[Function]}
                />
                <Column
                  name="state"
                  renderCell={[Function]}
                />
                <Column
                  name="supplier"
                  renderCell={[Function]}
                />
                <Column
                  name="name"
                  renderCell={[Function]}
                />
                <Column
                  name="id"
                  renderCell={[Function]}
                />
              </Table>,
              "className": "col-sm-12",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowMultipleSelection": true,
                "children": Array [
                  <Column
                    name="address"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="amount"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="state"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="supplier"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="name"
                    renderCell={[Function]}
                  />,
                  <Column
                    name="id"
                    renderCell={[Function]}
                  />,
                ],
                "className": "pt-striped",
                "defaultColumnWidth": 150,
                "defaultRowHeight": 20,
                "enableFocus": false,
                "fillBodyWithGhostCells": false,
                "isRowHeaderShown": true,
                "loadingOptions": Array [],
                "minColumnWidth": 50,
                "minRowHeight": 20,
                "numFrozenColumns": 0,
                "numFrozenRows": 0,
                "numRows": 8,
                "renderMode": 1,
                "renderRowHeader": [Function],
                "selectionModes": Array [
                  3,
                  2,
                  1,
                  0,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "column-address",
                  "nodeType": "class",
                  "props": Object {
                    "name": "address",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-amount",
                  "nodeType": "class",
                  "props": Object {
                    "name": "amount",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-state",
                  "nodeType": "class",
                  "props": Object {
                    "name": "state",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-supplier",
                  "nodeType": "class",
                  "props": Object {
                    "name": "supplier",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-name",
                  "nodeType": "class",
                  "props": Object {
                    "name": "name",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "column-id",
                  "nodeType": "class",
                  "props": Object {
                    "name": "id",
                    "renderCell": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`ContractQuery: index tag add new one 1`] = `
Object {
  "appName": "",
  "eventName": "",
  "field": "Select field",
  "history": false,
  "operator": "eq",
  "orgName": "",
  "tableName": "Bid",
  "value": "",
}
`;
