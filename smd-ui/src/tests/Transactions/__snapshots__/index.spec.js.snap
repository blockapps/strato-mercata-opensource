// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transactions: index mapStateToProps with default values 1`] = `
Object {
  "chainIds": Array [
    Object {
      "id": "a1021e62fbb7fe282b7e2bd1ca26325af02bb43e",
      "label": "mock-label",
    },
  ],
  "oauthUser": Object {
    "address": "86ee0c9644611495c0a1b1074e40d4e6db2f6b26",
    "username": "tanuj41",
  },
}
`;

exports[`Transactions: index render component With values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Transactions
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    asyncValidating={false}
    autofill={[Function]}
    blur={[Function]}
    chainIds={
      Array [
        Object {
          "id": "a1021e62fbb7fe282b7e2bd1ca26325af02bb43e",
          "label": "mock-label",
        },
      ]
    }
    change={[Function]}
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    dirty={false}
    dispatch={[Function]}
    error={undefined}
    fetchChainIds={[Function]}
    form="transactions"
    handleSubmit={[Function]}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={false}
    pristine={true}
    pure={true}
    reset={[Function]}
    selectChain={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    submit={[Function]}
    submitFailed={false}
    submitSucceeded={false}
    submitting={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={true}
    warning={undefined}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Connect(Tour))
          finalStepSelector="#tour-bloc-api-button"
          name="transactions"
          steps={
            Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-query-type",
                "text": "Run search queries against all transactions launched by your Smart Contracts.",
                "title": "Search your Transactions",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-bloc-api-button",
                "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
                "title": "Add API endpoints to your application",
                "type": "hover",
              },
            ]
          }
        />,
        <div
          className="row"
        >
          <div
            className="col-sm-7"
          >
            <h3>
              Transactions
            </h3>
          </div>
        </div>,
        <withRouter(Connect(ReduxForm)) />,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "finalStepSelector": "#tour-bloc-api-button",
          "name": "transactions",
          "steps": Array [
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-query-type",
              "text": "Run search queries against all transactions launched by your Smart Contracts.",
              "title": "Search your Transactions",
              "type": "hover",
            },
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-bloc-api-button",
              "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
              "title": "Add API endpoints to your application",
              "type": "hover",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-7"
          >
            <h3>
              Transactions
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Transactions
            </h3>,
            "className": "col-sm-7",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Transactions",
            },
            "ref": null,
            "rendered": "Transactions",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Connect(Tour))
            finalStepSelector="#tour-bloc-api-button"
            name="transactions"
            steps={
              Array [
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-query-type",
                  "text": "Run search queries against all transactions launched by your Smart Contracts.",
                  "title": "Search your Transactions",
                  "type": "hover",
                },
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-bloc-api-button",
                  "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
                  "title": "Add API endpoints to your application",
                  "type": "hover",
                },
              ]
            }
          />,
          <div
            className="row"
          >
            <div
              className="col-sm-7"
            >
              <h3>
                Transactions
              </h3>
            </div>
          </div>,
          <withRouter(Connect(ReduxForm)) />,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "finalStepSelector": "#tour-bloc-api-button",
            "name": "transactions",
            "steps": Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-query-type",
                "text": "Run search queries against all transactions launched by your Smart Contracts.",
                "title": "Search your Transactions",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-bloc-api-button",
                "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
                "title": "Add API endpoints to your application",
                "type": "hover",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-7"
            >
              <h3>
                Transactions
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Transactions
              </h3>,
              "className": "col-sm-7",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Transactions",
              },
              "ref": null,
              "rendered": "Transactions",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Transactions: index render component without values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Transactions
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    asyncValidating={false}
    autofill={[Function]}
    blur={[Function]}
    chainIds={Array []}
    change={[Function]}
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    dirty={false}
    dispatch={[Function]}
    error={undefined}
    fetchChainIds={[Function]}
    form="transactions"
    handleSubmit={[Function]}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    invalid={false}
    pristine={true}
    pure={true}
    reset={[Function]}
    selectChain={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    submit={[Function]}
    submitFailed={false}
    submitSucceeded={false}
    submitting={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={true}
    warning={undefined}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <withRouter(Connect(Tour))
          finalStepSelector="#tour-bloc-api-button"
          name="transactions"
          steps={
            Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-query-type",
                "text": "Run search queries against all transactions launched by your Smart Contracts.",
                "title": "Search your Transactions",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-bloc-api-button",
                "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
                "title": "Add API endpoints to your application",
                "type": "hover",
              },
            ]
          }
        />,
        <div
          className="row"
        >
          <div
            className="col-sm-7"
          >
            <h3>
              Transactions
            </h3>
          </div>
        </div>,
        <withRouter(Connect(ReduxForm)) />,
      ],
      "className": "container-fluid pt-dark",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "finalStepSelector": "#tour-bloc-api-button",
          "name": "transactions",
          "steps": Array [
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-query-type",
              "text": "Run search queries against all transactions launched by your Smart Contracts.",
              "title": "Search your Transactions",
              "type": "hover",
            },
            Object {
              "isFixed": true,
              "position": "bottom",
              "selector": "#tour-bloc-api-button",
              "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
              "title": "Add API endpoints to your application",
              "type": "hover",
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="col-sm-7"
          >
            <h3>
              Transactions
            </h3>
          </div>,
          "className": "row",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3>
              Transactions
            </h3>,
            "className": "col-sm-7",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Transactions",
            },
            "ref": null,
            "rendered": "Transactions",
            "type": "h3",
          },
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <withRouter(Connect(Tour))
            finalStepSelector="#tour-bloc-api-button"
            name="transactions"
            steps={
              Array [
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-query-type",
                  "text": "Run search queries against all transactions launched by your Smart Contracts.",
                  "title": "Search your Transactions",
                  "type": "hover",
                },
                Object {
                  "isFixed": true,
                  "position": "bottom",
                  "selector": "#tour-bloc-api-button",
                  "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
                  "title": "Add API endpoints to your application",
                  "type": "hover",
                },
              ]
            }
          />,
          <div
            className="row"
          >
            <div
              className="col-sm-7"
            >
              <h3>
                Transactions
              </h3>
            </div>
          </div>,
          <withRouter(Connect(ReduxForm)) />,
        ],
        "className": "container-fluid pt-dark",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "finalStepSelector": "#tour-bloc-api-button",
            "name": "transactions",
            "steps": Array [
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-query-type",
                "text": "Run search queries against all transactions launched by your Smart Contracts.",
                "title": "Search your Transactions",
                "type": "hover",
              },
              Object {
                "isFixed": true,
                "position": "bottom",
                "selector": "#tour-bloc-api-button",
                "text": "<strong>Bloc API</strong> offers a library of API endpoints you may use in any web application. Send and receive JSON data to your custom blockchains using <strong>Bloc API</strong>.",
                "title": "Add API endpoints to your application",
                "type": "hover",
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-7"
            >
              <h3>
                Transactions
              </h3>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <h3>
                Transactions
              </h3>,
              "className": "col-sm-7",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Transactions",
              },
              "ref": null,
              "rendered": "Transactions",
              "type": "h3",
            },
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
