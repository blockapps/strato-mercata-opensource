// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NodeCard: index mapStateToProps 1`] = `
Object {
  "dashboard": Object {
    "blockDifficulty": Array [
      Object {
        "x": 0,
        "y": 8192,
      },
      Object {
        "x": 1,
        "y": 131072,
      },
      Object {
        "x": 2,
        "y": 131072,
      },
      Object {
        "x": 3,
        "y": 131072,
      },
      Object {
        "x": 4,
        "y": 131072,
      },
      Object {
        "x": 5,
        "y": 131072,
      },
      Object {
        "x": 6,
        "y": 131072,
      },
      Object {
        "x": 7,
        "y": 131072,
      },
      Object {
        "x": 8,
        "y": 131072,
      },
      Object {
        "x": 9,
        "y": 131072,
      },
    ],
    "blockPropagation": Array [
      Object {
        "x": 0,
        "y": 0,
      },
      Object {
        "x": 1,
        "y": 1512994588,
      },
      Object {
        "x": 2,
        "y": 3358,
      },
      Object {
        "x": 3,
        "y": 19,
      },
      Object {
        "x": 4,
        "y": 1846,
      },
      Object {
        "x": 5,
        "y": 301,
      },
      Object {
        "x": 6,
        "y": 48,
      },
      Object {
        "x": 7,
        "y": 55429,
      },
      Object {
        "x": 8,
        "y": 106195,
      },
      Object {
        "x": 9,
        "y": 58,
      },
    ],
    "contractsCount": 2,
    "lastBlockNumber": 9,
    "transactionTypes": Array [
      Object {
        "type": "FunctionCall",
        "val": 6,
      },
      Object {
        "type": "Transfer",
        "val": 1,
      },
      Object {
        "type": "Contract",
        "val": 2,
      },
    ],
    "transactionsCount": Array [
      Object {
        "x": 0,
        "y": 0,
      },
      Object {
        "x": 1,
        "y": 1,
      },
      Object {
        "x": 2,
        "y": 1,
      },
      Object {
        "x": 3,
        "y": 1,
      },
      Object {
        "x": 4,
        "y": 1,
      },
      Object {
        "x": 5,
        "y": 1,
      },
      Object {
        "x": 6,
        "y": 1,
      },
      Object {
        "x": 7,
        "y": 1,
      },
      Object {
        "x": 8,
        "y": 1,
      },
      Object {
        "x": 9,
        "y": 1,
      },
    ],
    "usersCount": 1,
  },
  "node": Object {
    "coinbase": Object {
      "coinbase": "82069cc441c42b2706fa5d3129deeb677812e5a5",
    },
    "name": "LOCALHOST",
    "peers": Object {},
  },
}
`;

exports[`NodeCard: index render component with values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NodeCard
    dashboard={
      Object {
        "blockDifficulty": Array [
          Object {
            "x": 0,
            "y": 8192,
          },
          Object {
            "x": 1,
            "y": 131072,
          },
          Object {
            "x": 2,
            "y": 131072,
          },
          Object {
            "x": 3,
            "y": 131072,
          },
          Object {
            "x": 4,
            "y": 131072,
          },
          Object {
            "x": 5,
            "y": 131072,
          },
          Object {
            "x": 6,
            "y": 131072,
          },
          Object {
            "x": 7,
            "y": 131072,
          },
          Object {
            "x": 8,
            "y": 131072,
          },
          Object {
            "x": 9,
            "y": 131072,
          },
        ],
        "blockPropagation": Array [
          Object {
            "x": 0,
            "y": 0,
          },
          Object {
            "x": 1,
            "y": 1512994588,
          },
          Object {
            "x": 2,
            "y": 3358,
          },
          Object {
            "x": 3,
            "y": 19,
          },
          Object {
            "x": 4,
            "y": 1846,
          },
          Object {
            "x": 5,
            "y": 301,
          },
          Object {
            "x": 6,
            "y": 48,
          },
          Object {
            "x": 7,
            "y": 55429,
          },
          Object {
            "x": 8,
            "y": 106195,
          },
          Object {
            "x": 9,
            "y": 58,
          },
        ],
        "contractsCount": 2,
        "lastBlockNumber": 9,
        "transactionTypes": Array [
          Object {
            "type": "FunctionCall",
            "val": 6,
          },
          Object {
            "type": "Transfer",
            "val": 1,
          },
          Object {
            "type": "Contract",
            "val": 2,
          },
        ],
        "transactionsCount": Array [
          Object {
            "x": 0,
            "y": 0,
          },
          Object {
            "x": 1,
            "y": 1,
          },
          Object {
            "x": 2,
            "y": 1,
          },
          Object {
            "x": 3,
            "y": 1,
          },
          Object {
            "x": 4,
            "y": 1,
          },
          Object {
            "x": 5,
            "y": 1,
          },
          Object {
            "x": 6,
            "y": 1,
          },
          Object {
            "x": 7,
            "y": 1,
          },
          Object {
            "x": 8,
            "y": 1,
          },
          Object {
            "x": 9,
            "y": 1,
          },
        ],
        "usersCount": 1,
      }
    }
    node={
      Object {
        "coinbase": Object {
          "coinbase": "82069cc441c42b2706fa5d3129deeb677812e5a5",
        },
        "name": "LOCALHOST",
        "peers": Object {},
      }
    }
    subscribeRoom={[Function]}
    unSubscribeRoom={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="pt-card pt-elevation-2 node-success pt-interactive"
        onClick={[Function]}
      >
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
              Peers (
              0
              )
            </h3>
            <span
              className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
            >
              Expand
            </span>
          </div>
        </div>
        <hr />
        <Blueprint.Collapse
          component="div"
          isOpen={false}
          keepChildrenMounted={false}
          transitionDuration={200}
        >
          <withRouter(Connect(PeersCard)) />
        </Blueprint.Collapse>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Peers (
                0
                )
              </h3>
              <span
                className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
              >
                Expand
              </span>
            </div>
          </div>,
          <hr />,
          <Blueprint.Collapse
            component="div"
            isOpen={false}
            keepChildrenMounted={false}
            transitionDuration={200}
          >
            <withRouter(Connect(PeersCard)) />
          </Blueprint.Collapse>,
        ],
        "className": "pt-card pt-elevation-2 node-success pt-interactive",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-6"
            >
              <h3>
                Peers (
                0
                )
              </h3>
              <span
                className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
              >
                Expand
              </span>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h3>
                  Peers (
                  0
                  )
                </h3>,
                <span
                  className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                >
                  Expand
                </span>,
              ],
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Peers (",
                    0,
                    ")",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Peers (",
                  0,
                  ")",
                ],
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expand",
                  "className": "col-xs-3 text-right pt-icon-standard pt-icon-caret-down",
                },
                "ref": null,
                "rendered": "Expand",
                "type": "span",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <withRouter(Connect(PeersCard)) />,
            "component": "div",
            "isOpen": false,
            "keepChildrenMounted": false,
            "transitionDuration": 200,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="pt-card pt-elevation-2 node-success pt-interactive"
          onClick={[Function]}
        >
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Peers (
                0
                )
              </h3>
              <span
                className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
              >
                Expand
              </span>
            </div>
          </div>
          <hr />
          <Blueprint.Collapse
            component="div"
            isOpen={false}
            keepChildrenMounted={false}
            transitionDuration={200}
          >
            <withRouter(Connect(PeersCard)) />
          </Blueprint.Collapse>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="row"
            >
              <div
                className="col-sm-6"
              >
                <h3>
                  Peers (
                  0
                  )
                </h3>
                <span
                  className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                >
                  Expand
                </span>
              </div>
            </div>,
            <hr />,
            <Blueprint.Collapse
              component="div"
              isOpen={false}
              keepChildrenMounted={false}
              transitionDuration={200}
            >
              <withRouter(Connect(PeersCard)) />
            </Blueprint.Collapse>,
          ],
          "className": "pt-card pt-elevation-2 node-success pt-interactive",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-sm-6"
              >
                <h3>
                  Peers (
                  0
                  )
                </h3>
                <span
                  className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                >
                  Expand
                </span>
              </div>,
              "className": "row",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h3>
                    Peers (
                    0
                    )
                  </h3>,
                  <span
                    className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                  >
                    Expand
                  </span>,
                ],
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Peers (",
                      0,
                      ")",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "Peers (",
                    0,
                    ")",
                  ],
                  "type": "h3",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expand",
                    "className": "col-xs-3 text-right pt-icon-standard pt-icon-caret-down",
                  },
                  "ref": null,
                  "rendered": "Expand",
                  "type": "span",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <withRouter(Connect(PeersCard)) />,
              "component": "div",
              "isOpen": false,
              "keepChildrenMounted": false,
              "transitionDuration": 200,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`NodeCard: index render component without values 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NodeCard
    dashboard={
      Object {
        "blockDifficulty": Array [],
        "blockPropagation": Array [],
        "contractsCount": 0,
        "healthStatus": false,
        "lastBlockNumber": 0,
        "shardCount": 0,
        "transactionTypes": Array [],
        "transactionsCount": Array [],
        "uptime": 0,
        "usersCount": 0,
      }
    }
    node={
      Object {
        "coinbase": null,
        "name": "LOCALHOST",
        "peers": null,
      }
    }
    subscribeRoom={[Function]}
    unSubscribeRoom={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="pt-card pt-elevation-2 node-success pt-interactive"
        onClick={[Function]}
      >
        <div
          className="row"
        >
          <div
            className="col-sm-6"
          >
            <h3>
              Peers (
              0
              )
            </h3>
            <span
              className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
            >
              Expand
            </span>
          </div>
        </div>
        <hr />
        <Blueprint.Collapse
          component="div"
          isOpen={false}
          keepChildrenMounted={false}
          transitionDuration={200}
        >
          <withRouter(Connect(PeersCard)) />
        </Blueprint.Collapse>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Peers (
                0
                )
              </h3>
              <span
                className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
              >
                Expand
              </span>
            </div>
          </div>,
          <hr />,
          <Blueprint.Collapse
            component="div"
            isOpen={false}
            keepChildrenMounted={false}
            transitionDuration={200}
          >
            <withRouter(Connect(PeersCard)) />
          </Blueprint.Collapse>,
        ],
        "className": "pt-card pt-elevation-2 node-success pt-interactive",
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="col-sm-6"
            >
              <h3>
                Peers (
                0
                )
              </h3>
              <span
                className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
              >
                Expand
              </span>
            </div>,
            "className": "row",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h3>
                  Peers (
                  0
                  )
                </h3>,
                <span
                  className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                >
                  Expand
                </span>,
              ],
              "className": "col-sm-6",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "Peers (",
                    0,
                    ")",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "Peers (",
                  0,
                  ")",
                ],
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expand",
                  "className": "col-xs-3 text-right pt-icon-standard pt-icon-caret-down",
                },
                "ref": null,
                "rendered": "Expand",
                "type": "span",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <withRouter(Connect(PeersCard)) />,
            "component": "div",
            "isOpen": false,
            "keepChildrenMounted": false,
            "transitionDuration": 200,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="pt-card pt-elevation-2 node-success pt-interactive"
          onClick={[Function]}
        >
          <div
            className="row"
          >
            <div
              className="col-sm-6"
            >
              <h3>
                Peers (
                0
                )
              </h3>
              <span
                className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
              >
                Expand
              </span>
            </div>
          </div>
          <hr />
          <Blueprint.Collapse
            component="div"
            isOpen={false}
            keepChildrenMounted={false}
            transitionDuration={200}
          >
            <withRouter(Connect(PeersCard)) />
          </Blueprint.Collapse>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="row"
            >
              <div
                className="col-sm-6"
              >
                <h3>
                  Peers (
                  0
                  )
                </h3>
                <span
                  className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                >
                  Expand
                </span>
              </div>
            </div>,
            <hr />,
            <Blueprint.Collapse
              component="div"
              isOpen={false}
              keepChildrenMounted={false}
              transitionDuration={200}
            >
              <withRouter(Connect(PeersCard)) />
            </Blueprint.Collapse>,
          ],
          "className": "pt-card pt-elevation-2 node-success pt-interactive",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="col-sm-6"
              >
                <h3>
                  Peers (
                  0
                  )
                </h3>
                <span
                  className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                >
                  Expand
                </span>
              </div>,
              "className": "row",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h3>
                    Peers (
                    0
                    )
                  </h3>,
                  <span
                    className="col-xs-3 text-right pt-icon-standard pt-icon-caret-down"
                  >
                    Expand
                  </span>,
                ],
                "className": "col-sm-6",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Peers (",
                      0,
                      ")",
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "Peers (",
                    0,
                    ")",
                  ],
                  "type": "h3",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expand",
                    "className": "col-xs-3 text-right pt-icon-standard pt-icon-caret-down",
                  },
                  "ref": null,
                  "rendered": "Expand",
                  "type": "span",
                },
              ],
              "type": "div",
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "hr",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <withRouter(Connect(PeersCard)) />,
              "component": "div",
              "isOpen": false,
              "keepChildrenMounted": false,
              "transitionDuration": 200,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
