#strato-version:<VERSION>
#strato-getting-started-min-version:4.4.0
version: "3"
volumes:
  marketplacedata:
   driver: local
  pgdata:
    driver: local
  prometheusdata:
    driver: local
  kafkadata:
    driver: local
  redisdata:
    driver: local
  stratodata:
    driver: local
  zookeeperdata:
    driver: local
services:
  smd:
    depends_on:
    - apex
    - postgrest
    - prometheus
    - strato
    environment:
    - NODE_HOST=${NODE_HOST}
    - NODE_NAME=${NODE_NAME}
    - ssl=${ssl:-false}
    build: .
    image: ${SMD_IMAGE:-<REPO_URL>smd:<VERSION>}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  apex:
    depends_on:
    - postgres
    - prometheus
    - strato
    environment:
    - ADMIN_EMAIL=${ADMIN_EMAIL}
    - postgres_host=postgres
    - postgres_password=${postgres_password:-api}
    - postgres_port=5432
    - postgres_user=postgres
    - PROMETHEUS_HOST=${PROMETHEUS_HOST}
    - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    - STRATO_HOSTNAME=${STRATO_HOSTNAME}
    - STRATO_PORT_API=${STRATO_PORT_API}
    - STRATO_PORT_VAULT_PROXY=${STRATO_PORT_VAULT_PROXY:-8013}
    - MONITOR_URL=${MONITOR_URL}
    build: .
    image: ${APEX_IMAGE:-<REPO_URL>apex:<VERSION>}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  marketplace-backend:
    depends_on:
    - nginx
    environment:
    - BASE_CODE_COLLECTION=${BASE_CODE_COLLECTION}
    - MP_IS_BOOTNODE=${MP_IS_BOOTNODE:-false}
    - MP_API_DEBUG=${MP_API_DEBUG:-false}
    - MP_DELAY_DEPLOYMENT=${MP_DELAY_DEPLOYMENT}
    - MP_SERVER_HOST=${NODE_HOST}
    - MP_SERVER_SSL=${ssl}
    - STRATO_NODE_PROTOCOL=${STRATO_NODE_PROTOCOL}
    - STRATO_NODE_HOST=${STRATO_NODE_HOST}
    - NODE_LABEL=${NODE_NAME} # TODO: obsolete? (label is not used from config.yaml)
    - OAUTH_APP_TOKEN_COOKIE_NAME=${OAUTH_APP_TOKEN_COOKIE_NAME:-stratomp_session}
    - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
    - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
    - OAUTH_SCOPE=${OAUTH_SCOPE:-email openid} # TODO: to be removed after app oauth changes
    - OAUTH_SERVICE_OAUTH_FLOW=client-credential
    - OAUTH_TOKEN_FIELD=access_token
    - OAUTH_TOKEN_USERNAME_PROPERTY=${OAUTH_TOKEN_USERNAME_PROPERTY:-email}
    - OAUTH_TOKEN_USERNAME_PROPERTY_SERVICE_FLOW=${OAUTH_TOKEN_USERNAME_PROPERTY_SERVICE_FLOW:-sub}
    - STRATO_HOSTNAME=${STRATO_HOSTNAME}
    - STRATO_PORT_API=${STRATO_PORT_API}
    - GLOBAL_ADMIN_NAME=${GLOBAL_ADMIN_NAME}
    - GLOBAL_ADMIN_PASSWORD=${GLOBAL_ADMIN_PASSWORD}
    build: .
    image: ${MARKETPLACEBACKEND_IMAGE:-<REPO_URL>marketplace-backend:<VERSION>}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    volumes:
       - marketplacedata:/config:rw
  marketplace-ui:
    depends_on:
      - marketplace-backend
    environment:
      - SITE_ID=${SITE_ID:-038fe3fa}
      - STRATO_HOSTNAME=${STRATO_HOSTNAME}
      - STRATO_PORT_API=${STRATO_PORT_API}
    build: .
    image: ${MARKETPLACEUI_IMAGE:-<REPO_URL>marketplace-ui:<VERSION>}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  redis:
    command: [redis-server, --appendonly, "yes"]
    image: redis:3.2
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    volumes:
      - redisdata:/data
  strato:
    depends_on:
    - kafka
    - postgres
    - redis
    environment:
    - accountNonceLimit=${accountNonceLimit}
    - addBootnodes=${addBootnodes}
    - API_DEBUG_LOG=${API_DEBUG_LOG:-false}
    - appFetchLimit=${appFetchLimit}
    - averageTxsPerBlock=${averageTxsPerBlock}
    - blockstanbul=${blockstanbul}
    - blockstanbulBlockPeriodMs=${blockstanbulBlockPeriodMs}
    - blockstanbulRoundPeriodS=${blockstanbulRoundPeriodS}
    - blockTime=${blockTime}
    - bootnode=${bootnode}
    - connectionTimeout=${connectionTimeout}
    - creatorForkBlockNumber=${creatorForkBlockNumber}
    - debugFail=${debugFail}
    - debugPort=${debugPort}
    - debugWSHost=${debugWSHost}
    - debugWSPort=${debugWSPort}
    - validatorBehavior=${validatorBehavior:-true}
    - evmDebugMode=${evmDebugMode}
    - FILE_SERVER_URL=${FILE_SERVER_URL}
    - FULL_DEBUG_LOG=${FULL_DEBUG_LOG:-false}
    - gasLimit=${gasLimit}
    - generateKey=${generateKey:-true}
    - genesis=${genesis}
    - idServerUrl=${idServerUrl}
    - INSTRUMENTATION=${INSTRUMENTATION:-false}
    - kafkaHost=kafka
    - kafkaPort=9092
    - lazyBlocks=${lazyBlocks}
    - maxConn=${maxConn}
    - maxReturnedHeaders=${maxReturnedHeaders}
    - maxTxsPerBlock=${maxTxsPerBlock}
    - minBlockDifficulty=${minBlockDifficulty}
    - network=${network}
    - networkID=${networkID}
    - NOTIFICATION_SERVER_URL=${NOTIFICATION_SERVER_URL}
    - numMinPeers=${numMinPeers}
    - OAUTH_DISCOVERY_URL=${OAUTH_DISCOVERY_URL}
    - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
    - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
    - OAUTH_VAULT_PROXY_ALT_CLIENT_ID=${OAUTH_VAULT_PROXY_ALT_CLIENT_ID}
    - OAUTH_VAULT_PROXY_ALT_CLIENT_SECRET=${OAUTH_VAULT_PROXY_ALT_CLIENT_SECRET}
    - OAUTH_RESERVE_SECONDS=${OAUTH_RESERVE_SECONDS}
    - P2P_DEBUG_LOG=${P2P_DEBUG_LOG}
    - postgres_host=postgres
    - postgres_password=${postgres_password:-api}
    - postgres_port=5432
    - postgres_slipstream_db=cirrus
    - postgres_user=postgres
    - PROCESS_MONITORING=${PROCESS_MONITORING:-true}
    - redisBDBNumber=${redisBDBNumber}
    - redisHost=redis
    - redisPort=6379
    - requireCerts=${requireCerts:-true}
    - seqEventsBatchSize=${seqEventsBatchSize}
    - seqEventsCostHeuristic=${seqEventsCostHeuristic}
    - seqMaxEventsPerIter=${seqMaxEventsPerIter}
    - seqMaxUsPerIter=${seqMaxUsPerIter}
    - seqRTSOPTs=${seqRTSOPTs}
    - SEQUENCER_DEBUG_LOG=${SEQUENCER_DEBUG_LOG:-false}
    - SLIPSTREAM_DEBUG_LOG=${SLIPSTREAM_DEBUG_LOG:-false}
    - SLIPSTREAM_OPTIONAL=${SLIPSTREAM_OPTIONAL}
    - strictBlockstanbul=${strictBlockstanbul}
    - strictGas=${strictGas}
    - strictGasLimit=${strictGasLimit}
    - STRIPE_PAYMENT_SERVER_URL=${STRIPE_PAYMENT_SERVER_URL}
    - svmTrace=${svmTrace}
    - sqlDiff=${sqlDiff}
    - svmDev=${svmDev}
    - txSizeLimit=${txSizeLimit}
    - userRegistryAddress=${userRegistryAddress}
    - userRegistryCodeHash=${userRegistryCodeHash}
    - useBuiltinUserRegistry=${useBuiltinUserRegistry}
    - useWalletsByDefault=${useWalletsByDefault}
    - VAULT_URL=${VAULT_URL}
    - VAULT_PROXY_DEBUG=${VAULT_PROXY_DEBUG}
    - VM_DEBUGGER=${VM_DEBUGGER}
    - VM_DEBUG_LOG=${VM_DEBUG_LOG:-false}
    - vmRunnerRTSOPTs=${vmRunnerRTSOPTs}
    - zkHost=zookeeper
    build: .
    image: ${STRATO_IMAGE:-<REPO_URL>strato:<VERSION>}
    ports:
    - 30303:30303
    - 30303:30303/udp
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    volumes:
      - stratodata:/var/lib/strato
      - ./genesis-block.json:/var/lib/strato/${genesis:-gettingStarted}Genesis.json
  postgrest:
    depends_on:
    - postgres
    environment:
    - blocHost=${blocHost:-strato:3000}
    - PG_ENV_POSTGRES_DB=cirrus
    - PG_ENV_POSTGRES_HOST=postgres
    - PG_ENV_POSTGRES_PASSWORD=${postgres_password:-api}
    - PG_ENV_POSTGRES_USER=postgres
    - PG_PORT_5432_TCP_PORT=5432
    - POSTGREST_LOG_LEVEL=${POSTGREST_LOG_LEVEL:-error}
    build: .
    image: ${POSTGREST_IMAGE:-<REPO_URL>postgrest:<VERSION>}
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  postgres:
    environment:
      - POSTGRES_PASSWORD=${postgres_password:-api}
    image: postgres:9.6
    volumes:
      - pgdata:/var/lib/postgresql/data
    command:
      - "postgres"
      - "-c"
      - "max_connections=300"
      - "-c"
      - "shared_buffers=512MB"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  nginx:
    depends_on:
    - apex
    - docs
    - postgrest
    - prometheus
    - smd
    - strato
    environment:
    - APEX_HOST=${APEX_HOST}
    - blockstanbul=${blockstanbul}
    - blockTime=${blockTime}
    - debugPort=${debugPort}
    - debugWSPort=${debugWSPort}
    - DOCS_HOST=${DOCS_HOST}
    - MARKETPLACE_BACKEND_HOST=${MARKETPLACE_BACKEND_HOST}
    - MARKETPLACE_UI_HOST=${MARKETPLACE_UI_HOST}
    - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
    - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
    - OAUTH_SCOPE=${OAUTH_SCOPE}
    - POSTGREST_HOST=${POSTGREST_HOST}
    - PROMETHEUS_HOST=${PROMETHEUS_HOST}
    - SERVE_LOGS=${SERVE_LOGS}
    - SMD_DEV_MODE=${SMD_DEV_MODE}
    - SMD_DEV_MODE_HOST_IP=${SMD_DEV_MODE_HOST_IP}
    - SMD_HOST=${SMD_HOST}
    - ssl=${ssl}
    - sslCertFileType=${sslCertFileType}
    - STATS_ENABLED=${STATS_ENABLED}
    - STRATO_HOSTNAME=${STRATO_HOSTNAME}
    - STRATO_PORT_API=${STRATO_PORT_API}
    - STRATO_PORT_API2=${STRATO_PORT_API2}
    - STRATO_PORT_LOGS=${STRATO_PORT_LOGS}
    - STRATO_PORT_VAULT_PROXY=${STRATO_PORT_VAULT_PROXY:-8013}
    - VM_DEBUGGER=${VM_DEBUGGER}
    build: .
    image: ${NGINX_IMAGE:-<REPO_URL>nginx:<VERSION>}
    ports:
    - ${HTTP_PORT:-80}:80 #TAG_REMOVE_WHEN_SSL_CUSTOM_HTTPS_PORT
    - ${HTTPS_PORT:-443}:443 #TAG_REMOVE_WHEN_NO_SSL
    volumes:
    - ./ssl:/tmp/ssl:ro
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  docs:
    environment:
    - API_URL=/strato-api/eth/v1.2/swagger.json
    image: swaggerapi/swagger-ui:v3.22.1
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  zookeeper:
    image: zookeeper:3.4.14
    restart: unless-stopped
    volumes:
      - zookeeperdata:/data
    environment:
      ZOO_DATA_LOG_DIR: /data
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  kafka:
    depends_on:
    - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_CLEANER_ENABLE: "true"
      KAFKA_LOG_DIRS: '/kafka/kafka-logs'
      KAFKA_LOG_RETENTION_HOURS: 168  # Set to 7 days
      KAFKA_OFFSET_METADATA_MAX_BYTES: 1048576
      KAFKA_OFFSETS_RETENTION_MINUTES: 2147483647 # Leaving as infinite for now
      KAFKA_MAX_REQUEST_SIZE: ${KAFKA_MAX_REQUEST_SIZE:-2500000}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_MESSAGE_MAX_BYTES:-2500000}
    image: registry-aws.blockapps.net:5000/blockapps-repo/kafka:2.12-2.0.1
    restart: unless-stopped
    volumes:
    - kafkadata:/kafka
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
  prometheus:
    build: .
    environment:
      - NODE_HOST=${NODE_HOST}
    image: ${PROMETHEUS_IMAGE:-<REPO_URL>prometheus:<VERSION>}
    volumes:
    - prometheusdata:/prometheus
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
