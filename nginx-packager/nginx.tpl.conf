user root;
worker_processes  1;

error_log  /usr/local/openresty/nginx/logs/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;

    default_type  application/octet-stream;

    log_format json_combined escape=json
      '{'
        '"time_local":"$time_local",'
        '"msec":"$msec",'
        '"remote_addr":"$remote_addr",'
        '"X-Forwarded-For":"$http_x_forwarded_for",'
        '"CF-Connecting-IP":"$http_cf_connecting_ip",'
        '"request_method":"$request_method",'
        '"request":"$request",'
        '"status": "$status",'
        '"request_time":"$request_time",'
        '"request_length":"$request_length",'
        '"bytes_sent":"$bytes_sent",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"http_user_agent":"$http_user_agent",'
        '"http_referrer":"$http_referer",'
        '"remote_user":"$remote_user",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_connect_time":"$upstream_connect_time",'
        '"upstream_header_time":"$upstream_header_time"'
      '}';

    map $request_uri $loggable {
        default   1;
        /metrics  0;
        /_ping    0;
    }

    access_log  /usr/local/openresty/nginx/logs/access.log  json_combined if=$loggable;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    lua_shared_dict  discovery 1m;
    lua_shared_dict  jwks 1m;
    lua_shared_dict introspection 10m;
    lua_shared_dict prometheus_metrics 10M;
    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
      metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    log_by_lua '
      metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
      metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    ';

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;         #TEMPLATE_MARK_SSL
    lua_ssl_verify_depth 5;                                                 #TEMPLATE_MARK_SSL

    client_body_buffer_size 64K;
    client_header_buffer_size 16k;
    client_max_body_size 4M;

    absolute_redirect off;

    limit_req_zone $binary_remote_addr zone=healthcheck:5m rate=5r/s;
    proxy_cache_path /tmp/nginx-cache levels=1:2 keys_zone=strato_short_term_cache:1m max_size=5m inactive=1s use_temp_path=off;

    server {
      listen 80;
      listen 443 ssl;                                                       #TEMPLATE_MARK_SSL

      ssl_certificate    /etc/ssl/certs/server.<SSL_CERT_FILE_TYPE>;        #TEMPLATE_MARK_SSL
      ssl_certificate_key  /etc/ssl/private/server.key;                     #TEMPLATE_MARK_SSL
                                                                            #TEMPLATE_MARK_SSL
      # Restrict older SSL and TLS versions for better security             #TEMPLATE_MARK_SSL
      ssl_protocols TLSv1.2 TLSv1.3;                                        #TEMPLATE_MARK_SSL
                                                                            #TEMPLATE_MARK_SSL
      # Redirect http traffic to https, except internal calls to 'nginx'    #TEMPLATE_MARK_SSL
      set $RWHTTPS "";                                                      #TEMPLATE_MARK_SSL
      if ($ssl_protocol = "") {                                             #TEMPLATE_MARK_SSL
        set $RWHTTPS "Y";                                                   #TEMPLATE_MARK_SSL
      }                                                                     #TEMPLATE_MARK_SSL
      if ($host = "nginx") {                                                #TEMPLATE_MARK_SSL
        set $RWHTTPS "";                                                    #TEMPLATE_MARK_SSL
      }                                                                     #TEMPLATE_MARK_SSL
      if ($RWHTTPS = "Y") {                                                 #TEMPLATE_MARK_SSL
        rewrite ^ https://$host$request_uri? permanent;                     #TEMPLATE_MARK_SSL
      }                                                                     #TEMPLATE_MARK_SSL

      set $session_name   strato_session;
      # set $session_secret <SESSION_SECRET>;
      set $ssl_session_tickets off;
      set $session_check_ssi off;
      set $session_cookie_persistent on;
      set $session_cookie_renew 600;
      set $session_cookie_lifetime 2592000;

      resolver 127.0.0.11 8.8.8.8 ipv6=off;

      large_client_header_buffers 4 16k;

      set $is_ui "false";
      set $allow_optional_anon_access "false";

      location /metrics {
        content_by_lua '
          metric_connections:set(ngx.var.connections_reading, {"reading"})
          metric_connections:set(ngx.var.connections_waiting, {"waiting"})
          metric_connections:set(ngx.var.connections_writing, {"writing"})
          prometheus:collect()
        ';
      }

      location /_ping {
        return 200 'pong';
      }

      location /auth/openidc/return {
        rewrite_by_lua_file  lua/openid.lua;
      }

      location /auth/logout {
        rewrite_by_lua_file  lua/openid.lua;
      }
     
      location / {
        set $is_ui "true";
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__MARKETPLACE_UI_HOST__/;                    #TEMPLATE_SMD_PROD_MODE
        rewrite_by_lua_file  lua/openid.lua;                                #TEMPLATE_SMD_DEV_MODE
        proxy_pass http://<SMD_DEV_MODE_HOST_IP>:3002/;                     #TEMPLATE_SMD_DEV_MODE
      }

      location /sockjs-node {                                               #TEMPLATE_SMD_DEV_MODE
        proxy_set_header Upgrade $http_upgrade;                             #TEMPLATE_SMD_DEV_MODE
        proxy_set_header Connection "upgrade";                              #TEMPLATE_SMD_DEV_MODE
        proxy_http_version 1.1;                                             #TEMPLATE_SMD_DEV_MODE
        proxy_pass http://<SMD_DEV_MODE_HOST_IP>:3002/sockjs-node;          #TEMPLATE_SMD_DEV_MODE
      }                                                                     #TEMPLATE_SMD_DEV_MODE

      location = /favicon.ico {
        proxy_pass http://__SMD_HOST__/favicon.ico;
      }

      # This solves the issue with oauth reauthorization when SMD is refreshed after getting 401 Unauthorized in any API response; merge favicon locations when served as static file;
      location = /dashboard/favicon.ico {
        proxy_pass http://__SMD_HOST__/favicon.ico;
      }

      location = /dashboard {
        return 302 /dashboard/;
      }

      location /dashboard/ {
        set $is_ui "true";
        rewrite_by_lua_file  lua/openid.lua;
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__SMD_HOST__/;
      }

      location = /apex-api {
        return 302 /apex-api/;
      }

      # Publicly available node health endpoint
      location /health {
        limit_req zone=healthcheck burst=20;
        limit_req_status 429;
        proxy_cache strato_short_term_cache;
        proxy_cache_valid any 1s;
        proxy_pass http://__APEX_HOST__/health;
      }

      location /apex-api/user {
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                         #TEMPLATE_MARK_STATS_ENABLED
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__APEX_HOST__/user;
        client_max_body_size 100m;
      }

      location /apex-api/status {
        rewrite_by_lua_file lua/openid.lua;
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__APEX_HOST__/status;
        client_max_body_size 100m;
      }

      location /apex-ws/ {
        rewrite_by_lua_file lua/openid.lua;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        #TEMPLATE_MARK_SSL
        proxy_set_header Host $host;                                        #TEMPLATE_MARK_SSL
        proxy_pass http://__APEX_HOST__/apex-ws/;
      }

      location /cirrus/search {
        return 302 /cirrus/search/;
      }

      location /cirrus/search/ {
        limit_except GET {
          deny all;
        }
        # adjust proxy buffer size as postgrest can return long headers with Content-Location including the full url path
        proxy_buffer_size   128k;
        proxy_buffers   4 256k;
        proxy_busy_buffers_size   256k;
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                         #TEMPLATE_MARK_STATS_ENABLED
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__POSTGREST_HOST__/;
      }

      location = /bloc/v2.2/ {
        rewrite_by_lua_file lua/openid.lua;
        proxy_read_timeout <BLOC_TIMEOUT>s;
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API__/bloc/v2.2/;
      }

      location /bloc/v2.2/ {
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                         #TEMPLATE_MARK_STATS_ENABLED
        proxy_read_timeout <BLOC_TIMEOUT>s;
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API__/bloc/v2.2/;
      }

      location /docs {
        return 302 /docs/;
      }

      location /docs/ {
        proxy_read_timeout 300;
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__DOCS_HOST__/;
      }

      location /docs/v2.0/ {                                                    #TEMPLATE_MARK_EXPERIMENTAL_STRATO_API
        proxy_read_timeout 300;                                                 #TEMPLATE_MARK_EXPERIMENTAL_STRATO_API
        proxy_set_header Accept-Encoding "";                                    #TEMPLATE_MARK_EXPERIMENTAL_STRATO_API
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API2__/docs/v2.0/;  #TEMPLATE_MARK_EXPERIMENTAL_STRATO_API
      }                                                                         #TEMPLATE_MARK_EXPERIMENTAL_STRATO_API

      location /bloc/v2.2/docs {
        proxy_read_timeout 300;
        proxy_set_header Accept-Encoding "";
        return 301 /docs/?url=/bloc/v2.2/swagger.json;
      }

      location /prometheus {
        rewrite_by_lua_file lua/openid.lua;
        proxy_pass http://__PROMETHEUS_HOST__;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
      }

      location /logs/strato/ {                                                  #TEMPLATE_MARK_LOGS
        rewrite_by_lua_file lua/openid.lua;                                     #TEMPLATE_MARK_LOGS
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_LOGS__/;            #TEMPLATE_MARK_LOGS
        add_header Content-Type text/plain;                                     #TEMPLATE_MARK_LOGS
      }                                                                         #TEMPLATE_MARK_LOGS
                                                                                #TEMPLATE_MARK_LOGS
      location /strato-api/eth/v1.2/docs {
        proxy_read_timeout 300;
        proxy_set_header Accept-Encoding "";
        return 301 /docs/?url=/strato-api/eth/v1.2/swagger.json;
      }

      location = /strato-api {
        return 302 /strato-api/;
      }

      location = /strato-api/ {
        rewrite_by_lua_file lua/openid.lua;
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API__/;
      }

      location /strato-api/ {
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                             #TEMPLATE_MARK_STATS_ENABLED
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API__/;
      }

      location /strato/v2.3/transaction {
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                             #TEMPLATE_MARK_STATS_ENABLED
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API__/bloc/v2.2/transaction;
      }

      location /strato/v2.3/key {
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                             #TEMPLATE_MARK_STATS_ENABLED
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_VAULT_PROXY__/strato/v2.3/key;
      }

      location /strato/v2.3/users {
        rewrite_by_lua_file lua/openid.lua;
#         auth_request /_api_counter;                                             #TEMPLATE_MARK_STATS_ENABLED
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_VAULT_PROXY__/strato/v2.3/users;
      }

      location /strato/v2.3/metrics {
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_VAULT_PROXY__/strato/v2.3/metrics;
      }                                                                          #TEMPLATE_MARK_BLOCKSTANBUL

      location /vm-debug/ {                                                 #TEMPLATE_MARK_DEBUG
        rewrite_by_lua_file lua/openid.lua;                                 #TEMPLATE_MARK_DEBUG
        proxy_pass http://__STRATO_HOSTNAME__:<DEBUG_PORT_PLACEHOLDER>/;    #TEMPLATE_MARK_DEBUG
      }                                                                     #TEMPLATE_MARK_DEBUG

      location /vm-debug-ws/ {                                              #TEMPLATE_MARK_DEBUG
        rewrite_by_lua_file lua/openid.lua;                                 #TEMPLATE_MARK_DEBUG
        proxy_pass http://__STRATO_HOSTNAME__:<WS_DEBUG_PORT_PLACEHOLDER>/; #TEMPLATE_MARK_DEBUG
        proxy_http_version 1.1;                                             #TEMPLATE_MARK_DEBUG
        proxy_set_header Upgrade $http_upgrade;                             #TEMPLATE_MARK_DEBUG
        proxy_set_header Connection "Upgrade";                              #TEMPLATE_MARK_DEBUG
        proxy_set_header Host $host;                                        #TEMPLATE_MARK_DEBUG
      }                                                                     #TEMPLATE_MARK_DEBUG

#       location = /_api_counter {                                            #TEMPLATE_MARK_STATS_ENABLED
#         internal;                                                           #TEMPLATE_MARK_STATS_ENABLED
#         proxy_pass http://__APEX_HOST__/_api_counter;                       #TEMPLATE_MARK_STATS_ENABLED
#         proxy_pass_request_body off;                                        #TEMPLATE_MARK_STATS_ENABLED
#         proxy_set_header X-Original-METHOD $request_method;                 #TEMPLATE_MARK_STATS_ENABLED
#         proxy_set_header Content-Length "";                                 #TEMPLATE_MARK_STATS_ENABLED
#       }                                                                     #TEMPLATE_MARK_STATS_ENABLED

# ===============================


      location /login {
        set $is_ui "true";
        rewrite_by_lua_file  lua/openid.lua;
        proxy_set_header Accept-Encoding "";
        proxy_read_timeout 300;
        proxy_pass http://__STRATO_HOSTNAME__:__STRATO_PORT_API__/eth/v1.2/identity;
      }

      # TODO: prefix api path with marketplace (requires marketplace app changes)
      location = /api/v1 {
        return 302 /api/v1/;
      }

      location /api/v1 {
        rewrite_by_lua_file lua/openid.lua;
        set $allow_optional_anon_access "true";
        proxy_set_header Accept-Encoding "";
        proxy_pass http://__MARKETPLACE_BACKEND_HOST__$request_uri;
        client_max_body_size 1m;
      }

      location = /sitemap.xml {
        proxy_pass http://__MARKETPLACE_BACKEND_HOST__/sitemap.xml;
      }

      location = /eventstream {
        rewrite_by_lua_file lua/openid.lua;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_pass http://__MARKETPLACE_BACKEND_HOST__/eventstream;
      }
    }
}
